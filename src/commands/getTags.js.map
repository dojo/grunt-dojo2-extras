{"version":3,"file":"getTags.js","sourceRoot":"","sources":["../../../src/commands/getTags.ts"],"names":[],"mappings":";;;;;;;;;;;;IACA,+BAAiC;IACjC,yBAAgC;IAChC,6BAA4B;IAS5B,wBAA+B,IAAY,EAAE,OAAe,EAAE,OAAe;QAC5E,MAAM,CAAC,WAAI,CAAC,IAAI,EAAM,OAAO,SAAM,OAAU,CAAC,CAAC;IAChD,CAAC;IAFD,wCAEC;IAKD,wBAA+B,IAAY,EAAE,OAAe,EAAE,OAAe;QAC5E,MAAM,CAAC,WAAI,CAAC,IAAI,EAAM,OAAO,SAAM,OAAO,UAAQ,CAAC,CAAC;IACrD,CAAC;IAFD,wCAEC;IAOD,oCAA2C,OAAe,EAAE,SAAiB;QAC5E,MAAM,CAAC,UAAC,GAAQ;YACf,MAAM,CAAC,CAAC,eAAU,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC;IACH,CAAC;IAJD,gEAIC;IAOD,oCAA2C,OAAe,EAAE,SAAiB;QAC5E,MAAM,CAAC,UAAC,GAAQ;YACf,MAAM,CAAC,CAAC,eAAU,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC;IACH,CAAC;IAJD,gEAIC;IAOD,sBAA6B,IAAS,EAAE,KAAa,EAAE,KAAY;QAClE,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,CAAC;IAFD,oCAEC;IAMD,6BAAoC,IAAY;QAC/C,MAAM,CAAC,UAAC,GAAQ;YACf,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,OAAQ,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC;IACH,CAAC;IALD,kDAKC;IAQD,iBAAsC,IAAY,EAAE,OAAyB;QAAzB,wBAAA,EAAA,YAAyB;;;;4BACpE,WAAM,IAAI,CAAC,SAAS,EAAE,EAAA;4BAA9B,WAAO,CAAC,SAAsB,CAAC;6BAC7B,MAAM,CAAC,UAAU,GAAG;4BACpB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC/B,CAAC,CAAC;6BACD,IAAI,CAAC,UAAU,CAAM,EAAE,CAAM;4BAC7B,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BAClC,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACnC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAK,EAAE,KAAM,EAAE,IAAI,CAAC,CAAC;wBAC5C,CAAC,CAAC;6BACD,MAAM,CAAC,UAAU,GAAQ,EAAE,KAAa,EAAE,KAAY;4BACtD,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gCAAvB,IAAM,MAAM,gBAAA;gCAChB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;oCAChC,MAAM,CAAC,KAAK,CAAC;gCACd,CAAC;6BACD;4BACD,MAAM,CAAC,IAAI,CAAC;wBACb,CAAC,CAAC,EAAC;;;;KACJ;IAlBD,0BAkBC","sourcesContent":["import GitHub, { Tag } from '../util/GitHub';\nimport * as semver from 'semver';\nimport { existsSync } from 'fs';\nimport { join } from 'path';\n\nexport interface TagFilter {\n\t(tag: Tag, index: number, array: Tag[]): boolean;\n}\n\n/**\n * creates a path to HTML API docs\n */\nexport function getHtmlApiPath(base: string, project: string, version: string) {\n\treturn join(base, `${ project }/${ version }`);\n}\n\n/**\n * creates a path to JSON API docs\n */\nexport function getJsonApiPath(base: string, project: string, version: string) {\n\treturn join(base, `${ project }-${ version }.json`);\n}\n\n/**\n * @param project project name\n * @param directory the base directory where html api docs are stored\n * @return a filter for existing html api docs\n */\nexport function createHtmlApiMissingFilter(project: string, directory: string): TagFilter {\n\treturn (tag: Tag) => {\n\t\treturn !existsSync(getHtmlApiPath(directory, project, tag.name));\n\t};\n}\n\n/**\n * @param project project name\n * @param directory the base directory where json api docs are stored\n * @return a filter for existing json api docs\n */\nexport function createJsonApiMissingFilter(project: string, directory: string): TagFilter {\n\treturn (tag: Tag) => {\n\t\treturn !existsSync(getJsonApiPath(directory, project, tag.name));\n\t};\n}\n\n/**\n * A filters only the latest\n * @param index the index of the tag\n * @return if the tag is the latest\n */\nexport function latestFilter(_tag: Tag, index: number, array: Tag[]) {\n\treturn index === array.length - 1;\n}\n\n/**\n * @param comp a semver comparison\n * @return a filter to check if the tag satisfies the semver\n */\nexport function createVersionFilter(comp: string): TagFilter {\n\treturn (tag: Tag) => {\n\t\tconst version = semver.clean(tag.name);\n\t\treturn semver.satisfies(version!, comp);\n\t};\n}\n\n/**\n * Get a list of GitHub tags that pass the supplied filters\n * @param repo the GitHub repository\n * @param filters Tag filters to apply to the tag\n * @return a list of tags\n */\nexport default async function getTags(repo: GitHub, filters: TagFilter[] = []): Promise<Tag[]> {\n\treturn (await repo.fetchTags())\n\t\t.filter(function (tag) {\n\t\t\treturn semver.clean(tag.name);\n\t\t})\n\t\t.sort(function (a: Tag, b: Tag) {\n\t\t\tconst left = semver.clean(a.name);\n\t\t\tconst right = semver.clean(b.name);\n\t\t\treturn semver.compare(left!, right!, true);\n\t\t})\n\t\t.filter(function (tag: Tag, index: number, array: Tag[]) {\n\t\t\tfor (const filter of filters) {\n\t\t\t\tif (!filter(tag, index, array)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n}\n"]}