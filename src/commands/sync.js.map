{"version":3,"file":"sync.js","sourceRoot":"","sources":["../../../src/commands/sync.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,mCAA8B;IAC9B,8BAAgC;IAUhC,cAAmC,OAAgB;;;;;;wBAC1C,MAAM,GAA0B,OAAO,OAAjC,EAAE,cAAc,GAAU,OAAO,eAAjB,EAAE,GAAG,GAAK,OAAO,IAAZ,CAAa;wBAC1C,GAAG,GAAG,IAAI,aAAG,CAAC,cAAc,CAAC,CAAC;wBAEpC,YAAM,CAAC,IAAI,CAAC,aAAY,GAAG,YAAS,cAAiB,CAAC,CAAC;wBACvD,WAAM,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,EAAA;;wBAA3D,SAA2D,CAAC;6BACxD,GAAG,CAAC,aAAa,EAAE,EAAnB,cAAmB;wBACtB,YAAM,CAAC,IAAI,CAAC,kCAAiC,cAAiB,CAAC,CAAC;wBAChE,WAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;4BAGtB,WAAM,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAApB,SAAoB,CAAC;;4BAEtB,WAAM,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;6BACxB,IAAI,CACJ,cAAM,OAAA,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAA1B,CAA0B,EAChC,cAAM,OAAA,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,EAAxB,CAAwB,CAC9B,EAAA;;wBAJF,SAIE,CAAC;;;;;KACH;IAlBD,uBAkBC","sourcesContent":["import Git from '../util/Git';\nimport { logger } from '../log';\n\nexport interface Options {\n\tbranch: string;\n\tcloneDirectory: string;\n\turl: string;\n\tusername?: string;\n\tuseremail?: string;\n}\n\nexport default async function sync(options: Options) {\n\tconst { branch, cloneDirectory, url } = options;\n\tconst git = new Git(cloneDirectory);\n\n\tlogger.info(`Syncing ${ url } to ${ cloneDirectory }`);\n\tawait git.ensureConfig(options.username, options.useremail);\n\tif (git.isInitialized()) {\n\t\tlogger.info(`Using existing repository at ${ cloneDirectory }`);\n\t\tawait git.assert(url);\n\t}\n\telse {\n\t\tawait git.clone(url);\n\t}\n\tawait git.checkout(branch)\n\t\t.then(\n\t\t\t() => git.pull('origin', branch),\n\t\t\t() => git.createOrphan(branch)\n\t\t);\n}\n"]}