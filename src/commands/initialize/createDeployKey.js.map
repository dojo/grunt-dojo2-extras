{"version":3,"file":"createDeployKey.js","sourceRoot":"","sources":["../../../../src/commands/initialize/createDeployKey.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,yBAAqE;IACrE,iCAAmC;IACnC,4CAAqG;IACrG,4CAA8C;IAC9C,8CAA2C;IAE3C,uBAA6B,aAAqB;;;;;wBACjD,EAAE,CAAC,CAAC,eAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;4BAC/B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;wBAC9C,CAAC;wBAEM,WAAM,kBAAS,CAAC,aAAa,CAAC,EAAA;4BAArC,WAAO,SAA8B,EAAC;;;;KACtC;IAED,0BAAgC,UAAkB,EAAE,gBAA8B;;;;;;wBAC3E,GAAG,GAAG,oBAAW,CAAC,qBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACtD,WAAM,IAAI,OAAO,CAAC,UAAU,OAAO;gCAClC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAiB,CAAC,gBAAgB,CAAC,CAAC;qCACrD,EAAE,CAAC,OAAO,EAAE;oCACZ,OAAO,EAAE,CAAC;gCACX,CAAC,CAAC,CAAC;4BACL,CAAC,CAAC,EAAA;;wBALF,SAKE,CAAC;wBACH,WAAO,GAAG,EAAC;;;;KACX;IAED,yBACC,aAAqC,EACrC,gBAA8D;QAD9D,8BAAA,EAAA,gBAAwB,GAAG,CAAC,OAAO,EAAE;QACrC,iCAAA,EAAA,mBAA2B,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC;;;;;;wBAE9D,YAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;wBAC5B,WAAM,aAAa,CAAC,aAAa,CAAC,EAAA;;wBAAzC,IAAI,GAAG,SAAkC;wBAE/C,YAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;wBAC7B,WAAM,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,EAAA;;wBAA/D,GAAG,GAAG,SAAyD;wBAErE,YAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;wBAC1C,WAAM,eAAK,CAAC,oBAAW,CAAC,qBAAgB,CAAC,gBAAgB,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,qBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAA;;wBAAhH,SAAgH,CAAC;wBAEjH,WAAO;gCACN,UAAU,EAAE,IAAI,CAAC,UAAU;gCAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;gCACzB,YAAY,EAAE,GAAG;6BACjB,EAAC;;;;KACF;IAlBD,kCAkBC","sourcesContent":["import { createReadStream, createWriteStream, existsSync } from 'fs';\nimport { logger } from '../../log';\nimport { createKey, decryptData, encryptData, EncryptResult, KeyPairFiles } from '../../util/crypto';\nimport * as env from '../../util/environment';\nimport { equal } from '../../util/streams';\n\nasync function initDeployKey(deployKeyFile: string) {\n\tif (existsSync(deployKeyFile)) {\n\t\tthrow new Error('Deploy key already exists');\n\t}\n\n\treturn await createKey(deployKeyFile);\n}\n\nasync function encryptDeployKey(privateKey: string, encryptedKeyFile: any | string) {\n\tconst enc = encryptData(createReadStream(privateKey));\n\tawait new Promise(function (resolve) {\n\t\tenc.encrypted.pipe(createWriteStream(encryptedKeyFile))\n\t\t\t.on('close', function () {\n\t\t\t\tresolve();\n\t\t\t});\n\t});\n\treturn enc;\n}\n\nexport default async function createDeployKey(\n\tdeployKeyFile: string = env.keyFile(),\n\tencryptedKeyFile: string = env.encryptedKeyFile(deployKeyFile)\n): Promise<KeyPairFiles & { encryptedKey: EncryptResult }> {\n\tlogger.info('Creating a deployment key');\n\tconst keys = await initDeployKey(deployKeyFile);\n\n\tlogger.info('Encrypting deployment key');\n\tconst enc = await encryptDeployKey(keys.privateKey, encryptedKeyFile);\n\n\tlogger.info(`Confirm decrypt deploy key`);\n\tawait equal(decryptData(createReadStream(encryptedKeyFile), enc.key, enc.iv), createReadStream(keys.privateKey));\n\n\treturn {\n\t\tprivateKey: keys.privateKey,\n\t\tpublicKey: keys.publicKey,\n\t\tencryptedKey: enc\n\t};\n}\n"]}