{"version":3,"file":"initDeployment.js","sourceRoot":"","sources":["../../../../src/commands/initialize/initDeployment.ts"],"names":[],"mappings":"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","sourcesContent":["import Travis, { EnvironmentVariable as TravisEnvironmentVariable } from '../../util/Travis';\nimport * as env from '../../util/environment';\nimport { existsSync, readFileSync } from 'fs';\nimport { logger } from '../../log';\nimport GitHub from '../../util/GitHub';\nimport createDeployKey from './createDeployKey';\nimport { find } from '@dojo/shim/array';\n\nexport interface Options {\n\tdeployKeyFile: string;\n\tencryptedKeyFile: string;\n}\n\nfunction shouldCreateDeployKey(envvars: TravisEnvironmentVariable[], encryptedKeyFile: string) {\n\tconst hasKeyValue = envvars.some((envvar) => {\n\t\treturn envvar.name === env.decryptKeyName;\n\t});\n\tconst hasIvValue = envvars.some((envvar) => {\n\t\treturn envvar.name === env.decryptIvName;\n\t});\n\tconst hasEncryptedKeyFile = existsSync(encryptedKeyFile);\n\tconst result = hasKeyValue && hasIvValue && hasEncryptedKeyFile;\n\n\tif (hasKeyValue !== result || hasIvValue !== result || hasEncryptedKeyFile !== result) {\n\t\tlogger.error('There is an environment mismatch between one or more decrypted key states');\n\t\tlogger.error(`Encrypted key file exists: ${ hasEncryptedKeyFile }`);\n\t\tlogger.error(`Travis has an environment variable \"${ env.decryptKeyName }\": ${ hasKeyValue }`);\n\t\tlogger.error(`Travis has an environment variable \"${ env.decryptIvName }\": ${ hasIvValue }`);\n\t\tlogger.error(`A deploy key will not be processed. The environment setup should be investigated.`);\n\t\tthrow new Error('Please review your environment!');\n\t}\n\n\treturn !result;\n}\n\nfunction displayDeployOptionSummary(envvars: TravisEnvironmentVariable[]) {\n\tconst deployEnvVar = find(envvars, (envvar) => {\n\t\treturn envvar.name === 'DEPLOY_DOCS';\n\t});\n\n\tif (deployEnvVar) {\n\t\tlogger.info(`It looks like this repository has DEPLOY_DOCS is set to \"${ deployEnvVar.value }\"`);\n\t}\n\tif (!deployEnvVar || deployEnvVar.value !== 'publish') {\n\t\tlogger.info('To begin publishing this site please add the DEPLOY_DOCS environment variable to Travis');\n\t\tlogger.info('and set its value to \"publish\"');\n\t}\n}\n\nexport default async function initDeployment(repo: GitHub, travis = new Travis(), options: Options = {\n\tdeployKeyFile: env.keyFile(),\n\tencryptedKeyFile: env.encryptedKeyFile()\n}) {\n\tconst { deployKeyFile, encryptedKeyFile } = options;\n\tlet keyResponse: { id: number } | null = null;\n\n\tif (!travis.isAuthorized()) {\n\t\tlogger.info('Creating a temporary authorization token in GitHub for Travis');\n\t\tawait travis.createAuthorization(repo);\n\t}\n\n\ttry {\n\t\tconst travisRepo = await travis.fetchRepository(repo.toString());\n\t\tconst travisEnvVars = await travisRepo.listEnvironmentVariables();\n\n\t\tif (shouldCreateDeployKey(travisEnvVars, encryptedKeyFile)) {\n\t\t\tconst keys = await createDeployKey(deployKeyFile, encryptedKeyFile);\n\n\t\t\tlogger.info('Adding deployment key to GitHub');\n\t\t\tkeyResponse = await repo.createKey(readFileSync(keys.publicKey, {encoding: 'utf8'}));\n\n\t\t\tawait travisRepo.setEnvironmentVariables(\n\t\t\t\t{name: env.decryptKeyName, value: keys.encryptedKey.key, isPublic: false},\n\t\t\t\t{name: env.decryptIvName, value: keys.encryptedKey.iv, isPublic: false}\n\t\t\t);\n\n\t\t\tlogger.info('');\n\t\t\tlogger.info(`A new encrypted deploy key has been created at ${ encryptedKeyFile }.`);\n\t\t\tlogger.info(`Please commit this to your GitHub repository. The unencrypted keys \"${ keys.publicKey }\"`);\n\t\t\tlogger.info(`and \"${ keys.privateKey }\" may be deleted.`);\n\t\t\tlogger.info(`Variables to decrypt this key have been added to your Travis repository with the name`);\n\t\t\tlogger.info(`\"${ env.decryptKeyName }\" and \"${ env.decryptIvName }\".`);\n\t\t}\n\t\telse {\n\t\t\tlogger.info(`An encrypted deploy key already exists at \"${ encryptedKeyFile }\" so a new one was not created.`);\n\t\t}\n\n\t\tdisplayDeployOptionSummary(travisEnvVars);\n\t}\n\tcatch (e) {\n\t\tlogger.error(`There was an error ${ e.message }. Cleaning up...`);\n\t\tif (keyResponse) {\n\t\t\tawait repo.deleteKey(keyResponse!.id);\n\t\t}\n\t\tthrow e;\n\t}\n\tfinally {\n\t\tlogger.info('Removing temporary authorization token from GitHub');\n\t\tawait travis.deleteAuthorization(repo);\n\t}\n}\n"]}