{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../src/commands/typedoc.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,6BAAwC;IACxC,iCAAwC;IACxC,8BAAgC;IAChC,mCAAuE;IAEvE,6BAA+B;IAC/B,yBAA0C;IAC1C,yCAA4C;IA4B5C;QAAsB,mCAAU;QAAhC;;QAgBA,CAAC;QAbU,2BAAS,GAAnB,UAAoB,OAAa;YAChC,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,iBAAM,SAAS,YAAC,OAAO,CAAC,CAAC;QACxD,CAAC;QAED,8BAAY,GAAZ,UAAa,OAAqC,EAAE,GAAW;YAC9D,aAAM,CAAC,cAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,iBAAM,YAAY,YAAO,OAAO,EAAE,GAAG,CAAC,CAAC;QAC/C,CAAC;QAED,8BAAY,GAAZ,UAAa,OAAqC,EAAE,GAAW;YAC9D,aAAM,CAAC,GAAG,CAAC,CAAC;YACZ,MAAM,CAAC,iBAAM,YAAY,YAAO,OAAO,EAAE,GAAG,CAAC,CAAC;QAC/C,CAAC;QACF,cAAC;IAAD,CAAC,AAhBD,CAAsB,qBAAU,GAgB/B;IAED,oBAAoB,MAAc,EAAE,OAAoB;QACvD,OAAO,GAAU,MAAO,CAAC,MAAM,CAAC;YAC/B,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;SACb,EAAE,OAAO,CAAC,CAAC;QAEZ,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC;YAChC,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC1C,IAAM,MAAM,GAAG,2BAAc,CAAC,MAAM,EAAE,eAAU,CAAC,CAAC;gBAClD,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;YAC3B,CAAC;QACF,CAAC;QACD,IAAI,CAAC,CAAC;YACL,OAAO,OAAO,CAAC,QAAQ,CAAC;YACxB,EAAE,CAAC,CAAC,aAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACpC,YAAM,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;YACzE,CAAC;QACF,CAAC;QAED,YAAM,CAAC,KAAK,CAAC,qBAAoB,cAAO,CAAC,OAAO,CAAI,CAAC,CAAC;QAEtD,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IAED,iBAAsC,MAAc,EAAE,MAAc,EAAE,OAAuC;QAAvC,wBAAA,EAAA,YAAuC;;;;gBAC5G,YAAM,CAAC,IAAI,CAAC,sCAAoC,MAAM,gBAAW,MAAM,OAAI,CAAC,CAAC;gBAC7E,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAEhC,GAAG,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC3B,KAAK,GAAG,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;gBACnE,YAAM,CAAC,KAAK,CAAC,sBAAqB,cAAO,CAAC,KAAK,CAAI,CAAC,CAAC;gBAErD,EAAE,CAAC,CAAC,cAAO,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;oBACjC,GAAG,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBACjC,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,GAAG,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBACjC,CAAC;;;;KACD;IAdD,0BAcC","sourcesContent":["import { dirname, extname } from 'path';\nimport { sync as mkdirp } from 'mkdirp';\nimport { logger } from '../log';\nimport { Application as TypedocApp, ProjectReflection } from 'typedoc';\nimport { OptionsReadResult } from 'typedoc/dist/lib/utils/options';\nimport { inspect } from 'util';\nimport { existsSync, statSync } from 'fs';\nimport { findConfigFile } from 'typescript';\n\nexport interface BaseOptions {\n\tmode?: string;\n\texclude?: string;\n\tincludeDeclarations?: boolean;\n\texternalPattern?: string;\n\texcludeExternals?: boolean;\n\texcludePrivate?: boolean;\n\tmodule?: 'common.js' | 'amd' | 'system' | 'umd';\n\ttarget?: 'ES3' | 'ES5' | 'ES6';\n\ttsconfig?: boolean | string;\n}\n\nexport interface HtmlOptions extends BaseOptions {\n\ttheme?: 'default' | 'minimal' | string;\n\tname?: string;\n\treadme?: string;\n\thideGenerator?: boolean;\n\tgaID?: string;\n\tgaSite?: string;\n\tentryPoint?: string;\n\tincludes?: string;\n\tmedia?: string;\n}\n\nexport type Options = HtmlOptions | BaseOptions;\n\nclass Typedoc extends TypedocApp {\n\tbootstrapResult: OptionsReadResult;\n\n\tprotected bootstrap(options?: any): OptionsReadResult {\n\t\treturn this.bootstrapResult = super.bootstrap(options);\n\t}\n\n\tgenerateJson(project: ProjectReflection | string[], out: string): boolean {\n\t\tmkdirp(dirname(out));\n\t\treturn super.generateJson(<any> project, out);\n\t}\n\n\tgenerateDocs(project: ProjectReflection | string[], out: string): boolean {\n\t\tmkdirp(out);\n\t\treturn super.generateDocs(<any> project, out);\n\t}\n}\n\nfunction setOptions(source: string, options: BaseOptions): BaseOptions {\n\toptions = (<any> Object).assign({\n\t\tmodule: 'umd',\n\t\ttarget: 'ES5'\n\t}, options);\n\n\tif (options.tsconfig !== false) {\n\t\tif (typeof options.tsconfig !== 'string') {\n\t\t\tconst config = findConfigFile(source, existsSync);\n\t\t\toptions.tsconfig = config;\n\t\t}\n\t}\n\telse {\n\t\tdelete options.tsconfig;\n\t\tif (statSync(source).isDirectory()) {\n\t\t\tlogger.warn('typedoc cannot parse a directory without a tsconfig.json');\n\t\t}\n\t}\n\n\tlogger.debug(`Typedoc Options ${ inspect(options) }`);\n\n\treturn options;\n}\n\nexport default async function typedoc(source: string, target: string, options: BaseOptions | HtmlOptions = {}) {\n\tlogger.info(`Building API Documentation for \"${ source }\" to \"${ target }\"`);\n\toptions = setOptions(source, options);\n\n\tconst doc = new Typedoc(options);\n\tconst files = doc.expandInputFiles(doc.bootstrapResult.inputFiles);\n\tlogger.debug(`Processing files ${ inspect(files) }`);\n\n\tif (extname(target) === '.json') {\n\t\tdoc.generateJson(files, target);\n\t}\n\telse {\n\t\tdoc.generateDocs(files, target);\n\t}\n}\n"]}