{"version":3,"file":"process.js","sourceRoot":"","sources":["../../../src/util/process.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,+CAMuB;IACvB,8BAA2C;IAE3C,mBAA0B,IAAkB;QAC3C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;YAC3C,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,IAAI;gBAC9B,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAChB,OAAO,CAAC,IAAI,CAAC,CAAC;gBACf,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACxB,MAAM,CAAC,IAAI,KAAK,CAAC,mCAAkC,IAAO,CAAC,CAAC,CAAC;gBAC9D,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAZD,8BAYC;IAUD,sBAAsB,IAAkB,EAAE,OAA6B;QACtE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,eAAS,EAAE,CAAC,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,eAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1C,CAAC;IACF,CAAC;IAED,cAAqB,OAAe,EAAE,OAAyB;QAAzB,wBAAA,EAAA,YAAyB;QAC9D,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QACzC,YAAM,CAAC,KAAK,CAAC,UAAS,OAAU,CAAC,CAAC;QAClC,IAAM,IAAI,GAAiB,oBAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACvD,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAND,oBAMC;IAED,qBAA4B,OAAe,EAAE,OAAyB;QAAzB,wBAAA,EAAA,YAAyB;QAErE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1C,CAAC;IAJD,kCAIC;IAKD,eAAsB,OAAe,EAAE,IAAc,EAAE,OAA0B;QAA1B,wBAAA,EAAA,YAA0B;QAChF,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QACzC,YAAM,CAAC,KAAK,CAAC,WAAU,OAAO,UAAM,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC;QACnE,IAAM,IAAI,GAAiB,qBAAU,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9D,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAND,sBAMC;IAED,sBAA6B,OAAe,EAAE,IAAc,EAAE,OAA0B;QAA1B,wBAAA,EAAA,YAA0B;QAEvF,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IACjD,CAAC;IAJD,oCAIC","sourcesContent":["import {\n\texec as execChild,\n\tspawn as spawnChild,\n\tChildProcess,\n\tExecOptions as ChildExecOptions,\n\tSpawnOptions as ChildSpawnOptions\n} from 'child_process';\nimport { logger, LogStream } from '../log';\n\nexport function promisify(proc: ChildProcess): Promise<ChildProcess> {\n\treturn new Promise(function (resolve, reject) {\n\t\tproc.on('close', function (code) {\n\t\t\tif (code === 0) {\n\t\t\t\tresolve(proc);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocess.exitCode = code;\n\t\t\t\treject(new Error(`Process exited with a code of ${ code }`));\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport interface CommonProcessOptions {\n\tdisplay?: boolean;\n\tsilent?: boolean;\n}\n\nexport interface ExecOptions extends CommonProcessOptions, ChildExecOptions {\n}\n\nfunction applyOptions(proc: ChildProcess, options: CommonProcessOptions) {\n\tif (options.silent === false || options.display === true) {\n\t\tproc.stdout.pipe(new LogStream());\n\t\tproc.stderr.pipe(new LogStream('error'));\n\t}\n}\n\nexport function exec(command: string, options: ExecOptions = {}): ChildProcess {\n\toptions.silent = options.silent || false;\n\tlogger.debug(`exec ${ command }`);\n\tconst proc: ChildProcess = execChild(command, options);\n\tapplyOptions(proc, options);\n\treturn proc;\n}\n\nexport function promiseExec(command: string, options: ExecOptions = {}) {\n\t// We don't have access to stdout and stderr buffers so we want then to output to console by default\n\toptions.silent = options.silent || false;\n\treturn promisify(exec(command, options));\n}\n\nexport interface SpawnOptions extends CommonProcessOptions, ChildSpawnOptions {\n}\n\nexport function spawn(command: string, args: string[], options: SpawnOptions = {}): ChildProcess {\n\toptions.silent = options.silent || false;\n\tlogger.debug(`spawn ${ command } ${ args ? args.join(' ') : '' }`);\n\tconst proc: ChildProcess = spawnChild(command, args, options);\n\tapplyOptions(proc, options);\n\treturn proc;\n}\n\nexport function promiseSpawn(command: string, args: string[], options: SpawnOptions = {}) {\n\t// We don't have access to stdout and stderr buffers so we want then to output to console by default\n\toptions.silent = options.silent || false;\n\treturn promisify(spawn(command, args, options));\n}\n"]}