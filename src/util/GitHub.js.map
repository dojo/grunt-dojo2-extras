{"version":3,"file":"GitHub.js","sourceRoot":"","sources":["../../../src/util/GitHub.ts"],"names":[],"mappings":"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","sourcesContent":["import { githubAuth, hasGitCredentials } from './environment';\nimport * as GitHubApi from 'github';\nimport { AuthorizationCreateParams } from 'github';\nimport '@dojo/shim/Promise';\n\nexport interface Tag {\n\tname: string;\n\tcommit: {\n\t\tsha: string;\n\t\turl: string;\n\t};\n}\n\nexport interface AuthResponse {\n\tid: number;\n\ttoken: string;\n\tnote: string;\n\tfingerprint: string;\n}\n\n/**\n * GitHub OAuth scopes define permissions granted to a specific token\n */\nexport type OAuthScope = 'user' | 'user:email' | 'user:follow' | 'public_repo' | 'repo' | 'repo_deployment' |\n\t'repo:status' | 'delete_repo' | 'notifications' | 'gist' | 'read:repo_hook' | 'write:repo_hook' |\n\t'admin:repo_hook' | 'admin:org_hook' | 'read:org' | 'write:org' | 'admin:org' | 'read:public_key' |\n\t'write:public_key' | 'admin:public_key' | 'read:gpg_key' | 'write:gpg_key' | 'admin:gpg_key';\n\nexport default class GitHub {\n\tname: string;\n\n\towner: string;\n\n\treadonly _api: GitHubApi;\n\n\tprivate authed = false;\n\n\tconstructor(owner: string, name: string) {\n\t\tif (!owner) {\n\t\t\tthrow new Error('A repo owner must be specified');\n\t\t}\n\t\tif (!name) {\n\t\t\tthrow new Error('A repo name must be specified');\n\t\t}\n\n\t\tthis._api = new GitHubApi({\n\t\t\theaders: {\n\t\t\t\t'user-agent': 'grunt-dojo2-extras'\n\t\t\t},\n\t\t\tPromise\n\t\t});\n\n\t\tthis.owner = owner;\n\t\tthis.name = name;\n\t}\n\n\tget api(): GitHubApi {\n\t\tthis.isApiAuthenticated();\n\t\treturn this._api;\n\t}\n\n\tget url(): string {\n\t\treturn hasGitCredentials() ? this.getSshUrl() : this.getHttpsUrl();\n\t}\n\n\tasync createAuthorization(params: AuthorizationCreateParams): Promise<AuthResponse> {\n\t\tconst response = await this.api.authorization.create(params);\n\t\treturn response.data;\n\t}\n\n\tasync createKey(key: string): Promise<any> {\n\t\tconst reponse = await this.api.repos.createKey({\n\t\t\tkey,\n\t\t\towner: this.owner,\n\t\t\tread_only: false,\n\t\t\trepo: this.name,\n\t\t\ttitle: 'Auto-created Travis Deploy Key'\n\t\t});\n\t\treturn reponse.data;\n\t}\n\n\tasync deleteAuthorization(id: string | number) {\n\t\treturn this.api.authorization.delete({\n\t\t\tid: String(id)\n\t\t});\n\t}\n\n\tasync deleteKey(id: string | number) {\n\t\treturn this.api.repos.deleteKey({\n\t\t\tid: String(id),\n\t\t\towner: this.owner,\n\t\t\trepo: this.name\n\t\t});\n\t}\n\n\tasync fetchTags(): Promise<Tag[]> {\n\t\tconst response = await this.api.repos.getTags({\n\t\t\towner: this.owner,\n\t\t\trepo: this.name\n\t\t});\n\t\treturn response.data;\n\t}\n\n\t/**\n\t * Find an authorization that matches the supplied params.\n\t * NOTE: the token value will be unavailable and is only available on creation\n\t * @param params search params to match for the authorization\n\t */\n\tasync findAuthorization(params: AuthorizationCreateParams): Promise<AuthResponse> {\n\t\tconst response = await this.api.authorization.getAll({\n\t\t\tpage: 1\n\t\t});\n\t\tconst auths: AuthResponse[] = response.data || [];\n\t\treturn auths.filter(function (auth: AuthResponse) {\n\t\t\tfor (const name in params) {\n\t\t\t\tconst expected = (<any> params)[name];\n\t\t\t\tconst actual = (<any> auth)[name];\n\t\t\t\tif (Array.isArray(expected)) {\n\t\t\t\t\tif (!Array.isArray(actual)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tfor (const value of expected) {\n\t\t\t\t\t\tif (actual.indexOf(value) === -1) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (expected !== actual) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t})[0];\n\t}\n\n\t/**\n\t * Report if the API has been authenticated with an OAuth token. API calls that have not been authenticated are\n\t * subject to stricter rate-limits\n\t * @return if the API has an OAuth token\n\t */\n\tisApiAuthenticated() {\n\t\tif (!this.authed) {\n\t\t\tconst auth = githubAuth();\n\n\t\t\tif (auth) {\n\t\t\t\tthis._api.authenticate(auth);\n\t\t\t}\n\t\t\tthis.authed = true;\n\t\t}\n\t\treturn !!(<any> this._api).auth;\n\t}\n\n\tgetHttpsUrl() {\n\t\treturn `https://github.com/${ this.owner }/${ this.name }.git`;\n\t}\n\n\tgetSshUrl() {\n\t\treturn `git@github.com:${ this.owner }/${ this.name }.git`;\n\t}\n\n\ttoString() {\n\t\treturn `${ this.owner }/${ this.name }`;\n\t}\n}\n"]}