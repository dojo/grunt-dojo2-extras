{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../../src/util/Git.ts"],"names":[],"mappings":"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","sourcesContent":["import { promiseExec, promiseSpawn, exec } from './process';\nimport { existsSync, chmodSync } from 'fs';\nimport { join, relative } from 'path';\nimport { ChildProcess } from 'child_process';\nimport { toString } from './streams';\nimport { logger } from '../log';\nimport * as env from '../util/environment';\n\nexport default class Git {\n\tcloneDirectory: string;\n\n\tkeyFile: string;\n\n\turl?: string;\n\n\tconstructor(cloneDirectory: string = process.cwd(), keyFile: string = env.keyFile()) {\n\t\tthis.cloneDirectory = cloneDirectory;\n\t\tthis.keyFile = keyFile;\n\t}\n\n\tasync add(... params: string[]): Promise<any> {\n\t\treturn promiseExec(`git add ${ params.join(' ') }`, { silent: false, cwd: this.cloneDirectory });\n\t}\n\n\t/**\n\t * Ensures that a repository is initialized and matches the provided url\n\t */\n\tasync assert(url: string): Promise<void> {\n\t\tif (!this.isInitialized()) {\n\t\t\tthrow new Error(`Repository is not initialized at \"${ this.cloneDirectory }\"`);\n\t\t}\n\n\t\tconst repoUrl = await this.getConfig('remote.origin.url');\n\t\tif (repoUrl !== url) {\n\t\t\tthrow new Error(`Repository mismatch. Expected \"${ repoUrl }\" to be \"${ url }\".`);\n\t\t}\n\t}\n\n\tcheckout(version: string) {\n\t\treturn promiseExec(`git checkout ${ version }`, { silent: false, cwd: this.cloneDirectory});\n\t}\n\n\tasync clone(url: string) {\n\t\tif (!this.cloneDirectory) {\n\t\t\tthrow new Error('A clone directory must be set');\n\t\t}\n\t\tlogger.info(`Cloning ${ url } to ${ this.cloneDirectory }`);\n\t\tif (this.isInitialized()) {\n\t\t\tlogger.info(`Repository exists at ${ this.cloneDirectory }`);\n\t\t\tawait this.assert(url);\n\t\t}\n\t\tawait this.execSSHAgent('git', [ 'clone', url, this.cloneDirectory ], { silent: false });\n\t\tthis.url = url;\n\t}\n\n\tasync commit(message: string): Promise<any> {\n\t\treturn this.execSSHAgent('git', ['commit', '-m', `\"${ message }\"`], { silent: false, cwd: this.cloneDirectory });\n\t}\n\n\tasync createOrphan(branch: string) {\n\t\tif (!this.cloneDirectory) {\n\t\t\tthrow new Error('A clone directory must be set');\n\t\t}\n\t\tawait promiseExec(`git checkout --orphan ${ branch }`, { silent: true, cwd: this.cloneDirectory });\n\t\tawait promiseExec('git rm -rf .', { silent: true, cwd: this.cloneDirectory });\n\t\tlogger.info(`Created \"${ branch }\" branch`);\n\t}\n\n\t/**\n\t * Ensures configuration required by GitHub exists\n\t * @param user a fallback user name if one does not exist\n\t * @param email a fallback email if one does not exist\n\t */\n\tasync ensureConfig(user: string = 'Travis CI', email: string = 'support@sitepen.com') {\n\t\tif (!(await this.hasConfig('user.name'))) {\n\t\t\tawait this.setConfig('user.name', user);\n\t\t}\n\t\tif (!(await this.hasConfig('user.email'))) {\n\t\t\tawait this.setConfig('user.email', email);\n\t\t}\n\t}\n\n\t/**\n\t * Execute a credentialed git command\n\t */\n\texecSSHAgent(command: string, args: string[], options: any = {}): Promise<ChildProcess> {\n\t\tif (this.hasDeployCredentials()) {\n\t\t\tconst deployKey: string = <string> this.keyFile;\n\t\t\tconst relativeDeployKey = options.cwd ? relative(options.cwd, deployKey) : deployKey;\n\t\t\tchmodSync(deployKey, '600');\n\t\t\treturn promiseExec(`ssh-agent bash -c 'ssh-add ${ relativeDeployKey }; ${ command } ${ args.join(' ') }'`, options);\n\t\t}\n\t\telse {\n\t\t\tlogger.info(`Deploy Key \"${ this.keyFile }\" is not present. Using environment credentials for ${ args[0] }.`);\n\t\t\treturn promiseSpawn(command, args, options);\n\t\t}\n\t}\n\n\tasync getConfig(key: string): Promise<string> {\n\t\tconst cwd = existsSync(this.cloneDirectory) ? this.cloneDirectory : process.cwd();\n\t\tconst proc = await exec(`git config ${ key }`, { silent: true, cwd });\n\t\treturn (await toString(proc.stdout)).trim();\n\t}\n\n\tasync areFilesChanged(): Promise<boolean> {\n\t\tconst proc = await exec('git status --porcelain', { silent: true, cwd: this.cloneDirectory });\n\t\tconst changes = (await toString(proc.stdout)).trim();\n\t\treturn changes !== '';\n\t}\n\n\tasync hasConfig(key: string): Promise<boolean> {\n\t\tconst value = await this.getConfig(key);\n\t\treturn !!value;\n\t}\n\n\t/**\n\t * @return {boolean} if a deploy key exists in the file system\n\t */\n\thasDeployCredentials(): boolean {\n\t\treturn existsSync(this.keyFile);\n\t}\n\n\tasync headRevision(): Promise<string> {\n\t\tconst proc = await exec(`git rev-parse HEAD`, { silent: false, cwd: this.cloneDirectory });\n\t\treturn (await toString(proc.stdout)).trim();\n\t}\n\n\t/**\n\t * If the current cloneDirectory is a git repository\n\t */\n\tisInitialized() {\n\t\tif (!this.cloneDirectory) {\n\t\t\tthrow new Error('A clone directory must be set');\n\t\t}\n\t\treturn existsSync(this.cloneDirectory) && existsSync(join(this.cloneDirectory, '.git'));\n\t}\n\n\tpull(remote?: string, branch?: string) {\n\t\tconst command = [ 'pull' ];\n\t\tif (remote) {\n\t\t\tcommand.push(remote);\n\t\t}\n\t\tif (branch) {\n\t\t\tcommand.push(branch);\n\t\t}\n\t\treturn this.execSSHAgent('git', command, {\n\t\t\tcwd: this.cloneDirectory\n\t\t});\n\t}\n\n\tpush(branch?: string, remote: string = 'origin') {\n\t\tconst params: string[] = branch ? [ 'push', remote, branch ] : [ 'push' ];\n\t\treturn this.execSSHAgent('git', params, { silent: false, cwd: this.cloneDirectory });\n\t}\n\n\tsetConfig(key: string, value: string) {\n\t\t// TODO make global optional\n\t\treturn promiseExec(`git config --global ${ key } ${ value }`, { silent: false });\n\t}\n}\n"]}