{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../../src/util/crypto.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+BAAiC;IAEjC,qCAA4C;IAC5C,mCAAqC;IAcrC,oBAAoB,KAAa;QAChC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAClE,CAAC;IAED,mBAAgC,aAAqC,EAAE,UAAkD;QAAzF,8BAAA,EAAA,gBAAwB,GAAG,CAAC,OAAO,EAAE;QAAE,2BAAA,EAAA,0CAAkD;;;;;;wBAClH,OAAO,GAAG,oCAAkC,UAAU,cAAU,aAAa,aAAS,CAAC;wBACvF,IAAI,GAAG,cAAI,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;wBAC9C,WAAM,mBAAS,CAAC,IAAI,CAAC,EAAA;;wBAArB,SAAqB,CAAC;wBACtB,WAAO;gCACN,SAAS,EAAM,aAAa,SAAO;gCACnC,UAAU,EAAE,aAAa;6BACzB,EAAC;;;;KACF;IARD,8BAQC;IAED,qBAA4B,IAAoB,EAAE,GAAW,EAAE,EAAU;QACxE,IAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAHD,kCAGC;IAED,qBAA4B,IAAoB,EAAE,GAAoB,EAAE,EAAmB;QAAzC,oBAAA,EAAA,MAAM,UAAU,CAAC,EAAE,CAAC;QAAE,mBAAA,EAAA,KAAK,UAAU,CAAC,EAAE,CAAC;QAC1F,IAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAE7D,MAAM,CAAC;YACN,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;YAC5B,EAAE,IAAA;YACF,GAAG,KAAA;SACH,CAAC;IACH,CAAC;IARD,kCAQC","sourcesContent":["import * as crypto from 'crypto';\nimport { Cipher, Decipher } from 'crypto';\nimport { exec, promisify } from './process';\nimport * as env from './environment';\nimport ReadableStream = NodeJS.ReadableStream;\n\nexport interface EncryptResult {\n\tencrypted: Cipher;\n\tiv: string;\n\tkey: string;\n}\n\nexport interface KeyPairFiles {\n\tpublicKey: string;\n\tprivateKey: string;\n}\n\nfunction randomUtf8(bytes: number): string {\n\treturn crypto.randomBytes(bytes).toString('hex').slice(0, bytes);\n}\n\nexport async function createKey(deployKeyFile: string = env.keyFile(), keyComment: string = 'Automated Travis Deploy Key'): Promise<KeyPairFiles> {\n\tconst command = `ssh-keygen -t rsa -b 4096 -C \"${ keyComment }\" -f ${ deployKeyFile } -N \"\"`;\n\tconst proc = exec(command, { silent: false });\n\tawait promisify(proc);\n\treturn {\n\t\tpublicKey: `${ deployKeyFile }.pub`,\n\t\tprivateKey: deployKeyFile\n\t};\n}\n\nexport function decryptData(data: ReadableStream, key: string, iv: string): Decipher {\n\tconst decipher = crypto.createDecipheriv('AES-256-CBC', key, iv);\n\treturn data.pipe(decipher);\n}\n\nexport function encryptData(data: ReadableStream, key = randomUtf8(32), iv = randomUtf8(16)): EncryptResult {\n\tconst cipher = crypto.createCipheriv('AES-256-CBC', key, iv);\n\n\treturn {\n\t\tencrypted: data.pipe(cipher),\n\t\tiv,\n\t\tkey\n\t};\n}\n"]}