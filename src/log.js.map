{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/log.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,mCAA6D;IAC7D,iCAAmD;IAEtC,QAAA,MAAM,GAAmB,IAAI,gBAAM,CAAC;QAChD,KAAK,EAAE,MAAM;QACb,UAAU,EAAE;YACX,IAAI,oBAAU,CAAC,OAAO,CAAC;gBACtB,SAAS,EAAE,KAAK;aAChB,CAAC;SACF;KACD,CAAC,CAAC;IAEH;QAA+B,qCAAQ;QAKtC,mBAAY,KAAsB,EAAE,IAAsB;YAA9C,sBAAA,EAAA,cAAsB;YAAlC,iBAKC;YAJA,IAAI,GAAG,IAAI,IAAI,SAAS,CAAC;YACzB,QAAA,kBAAM,IAAI,CAAC,SAAC;YACZ,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;QACpB,CAAC;QAKD,uBAAG,GAAH,UAAI,KAAW,EAAE,QAAc,EAAE,EAAa;YAC7C,iBAAM,GAAG,YAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;YAE/B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC;QAEM,0BAAM,GAAb,UAAc,KAAU,EAAE,QAAgB,EAAE,QAAkB;YAC7D,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3B,QAAQ,GAAG,OAAO,CAAC;YACpB,CAAC;YAED,IAAI,CAAC,iBAAiB,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YAErF,QAAQ,IAAI,QAAQ,EAAE,CAAC;QACxB,CAAC;QAEO,4BAAQ,GAAhB,UAAiB,GAAW;YAC3B,cAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACpC,CAAC;QAEO,qCAAiB,GAAzB,UAA0B,KAAa;YACtC,IAAM,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,EAAG,CAAC;YAE5B,GAAG,CAAC,CAAY,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;gBAAjB,IAAI,GAAG,eAAA;gBACX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;aAC1B;QACF,CAAC;QACF,gBAAC;IAAD,CAAC,AA/CD,CAA+B,iBAAQ,GA+CtC;IA/CY,8BAAS;IAiDtB,kBAAe,cAAM,CAAC","sourcesContent":["import { Logger, transports, LoggerInstance } from 'winston';\nimport { Writable, WritableOptions } from 'stream';\n\nexport const logger: LoggerInstance = new Logger({\n\tlevel: 'info',\n\ttransports: [\n\t\tnew transports.Console({\n\t\t\tshowLevel: false\n\t\t})\n\t]\n});\n\nexport class LogStream extends Writable {\n\tprivate buffer: string;\n\n\treadonly level: string;\n\n\tconstructor(level: string = 'info', opts?: WritableOptions) {\n\t\topts = opts || undefined;\n\t\tsuper(opts);\n\t\tthis.buffer = '';\n\t\tthis.level = level;\n\t}\n\n\tend(): void;\n\tend(chunk: any, cb?: Function): void;\n\tend(chunk: any, encoding?: string, cb?: Function): void;\n\tend(chunk?: any, encoding?: any, cb?: Function): void {\n\t\tsuper.end(chunk, encoding, cb);\n\n\t\tif (this.buffer.length) {\n\t\t\tthis.writeLog(this.buffer);\n\t\t}\n\n\t\tthis.emit('end');\n\t}\n\n\tpublic _write(chunk: any, encoding: string, callback: Function): void {\n\t\tif (encoding === 'buffer') {\n\t\t\tencoding = 'utf-8';\n\t\t}\n\n\t\tthis.writeLogMultiline(typeof chunk === 'string' ? chunk : chunk.toString(encoding));\n\n\t\tcallback && callback();\n\t}\n\n\tprivate writeLog(str: string) {\n\t\tlogger.log(this.level, str.trim());\n\t}\n\n\tprivate writeLogMultiline(chunk: string) {\n\t\tconst pieces = (this.buffer + chunk).split('\\n');\n\t\tthis.buffer = pieces.pop()!;\n\n\t\tfor (let str of pieces) {\n\t\t\tthis.writeLog(str.trim());\n\t\t}\n\t}\n}\n\nexport default logger;\n"]}