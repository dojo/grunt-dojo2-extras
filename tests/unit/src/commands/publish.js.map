{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../../../../tests/unit/src/commands/publish.ts"],"names":[],"mappings":"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","sourcesContent":["import loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet publish: any;\nlet gitCommitStub: SinonStub;\n\nregisterSuite('commands/publish', {\n\tbefore() {\n\t\tgitCommitStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tpublish = loadModule(require, '../../../../src/commands/publish', {\n\t\t\t'../util/environment': {\n\t\t\t\tgitCommit: gitCommitStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tgitCommitStub.reset();\n\t},\n\n\ttests: {\n\t'publish': {\n\t\tasync 'publishMode is a function that returns \"skip\"'() {\n\t\t\tconst opts = {\n\t\t\t\tbranch: 'master',\n\t\t\t\tpublishMode: stub().returns('skip'),\n\t\t\t\trepo: {\n\t\t\t\t\tareFilesChanged: stub()\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait publish(opts);\n\n\t\t\tassert.isTrue(opts.publishMode.calledOnce);\n\t\t\tassert.isTrue(opts.repo.areFilesChanged.notCalled);\n\t\t},\n\n\t\t'publishMode is a string': (() => {\n\t\t\tlet opts: any;\n\n\t\t\treturn {\n\t\t\t\tbeforeEach() {\n\t\t\t\t\topts = {\n\t\t\t\t\t\tbranch: 'master',\n\t\t\t\t\t\tpublishMode: 'commit',\n\t\t\t\t\t\trepo: {\n\t\t\t\t\t\t\tadd: stub().returns(Promise.resolve()),\n\t\t\t\t\t\t\tareFilesChanged: stub().returns(Promise.resolve(true)),\n\t\t\t\t\t\t\tcommit: stub().returns(Promise.resolve()),\n\t\t\t\t\t\t\tensureConfig: stub().returns(Promise.resolve()),\n\t\t\t\t\t\t\tgetConfig: stub().returns(Promise.resolve('username')),\n\t\t\t\t\t\t\tpush: stub().returns(Promise.resolve())\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\ttests: {\n\t\t\t\tasync 'repo has no changes'() {\n\t\t\t\t\tconst areFilesChanged = opts.repo.areFilesChanged;\n\n\t\t\t\t\tareFilesChanged.returns(Promise.resolve(false));\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(areFilesChanged.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.ensureConfig.notCalled);\n\t\t\t\t},\n\n\t\t\t\tasync 'publishMode is \"commit\"; gitCommit returns a value; repo is published'() {\n\t\t\t\t\tgitCommitStub.returns('a35de344');\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(opts.repo.ensureConfig.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.add.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.commit.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.commit.calledWith('Published by username from commit a35de344'));\n\t\t\t\t\tassert.isTrue(opts.repo.push.notCalled);\n\t\t\t\t},\n\n\t\t\t\tasync 'publishMode is \"commit\"; gitCommit returns falsy'() {\n\t\t\t\t\tgitCommitStub.returns(undefined);\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(opts.repo.commit.calledWith('Published by username'));\n\t\t\t\t},\n\n\t\t\t\tasync 'publishMode is \"publish\"'() {\n\t\t\t\t\topts.publishMode = 'publish';\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(opts.repo.push.calledOnce);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t})()\n\t}\n\t}\n});\n"]}