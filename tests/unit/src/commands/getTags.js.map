{"version":3,"file":"getTags.js","sourceRoot":"","sources":["../../../../../tests/unit/src/commands/getTags.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\nimport { getHtmlApiPath, getJsonApiPath } from '../../../../src/commands/getTags';\nimport { Tag } from '../../../../src/util/GitHub';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet module: any;\nlet existsSyncStub: SinonStub;\n\nfunction assertExistsFilter(builder: any, expected: boolean, filename: string) {\n\tconst filter = builder('project', 'directory');\n\texistsSyncStub.returns(expected);\n\tassert.strictEqual(filter({ name: 'version' }), !expected);\n\tassert.isTrue(existsSyncStub.called, 'existSync was not called');\n\tassert.strictEqual(existsSyncStub.firstCall.args[0], filename);\n}\n\nregisterSuite('getTags', {\n\tbefore() {\n\t\texistsSyncStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule(require, '../../../../src/commands/getTags', {\n\t\t\tfs: {\n\t\t\t\texistsSync: existsSyncStub\n\t\t\t}\n\t\t}, false);\n\t},\n\n\tafterEach() {\n\t\texistsSyncStub.reset();\n\t},\n\n\ttests: {\n\tgetHtmlApiPath() {\n\t\tassert.strictEqual(getHtmlApiPath('base', 'project', 'version'), path.join('base', 'project', 'version'));\n\t},\n\n\tgetJsonApiPath() {\n\t\tassert.strictEqual(getJsonApiPath('base', 'project', 'version'), path.join('base', 'project-version.json'));\n\t},\n\n\tfilters: {\n\t\tcreateHtmlApiMissingFilter: {\n\t\t\t'exists; returns false'() {\n\t\t\t\tconst { createHtmlApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createHtmlApiMissingFilter, true, path.join('directory', 'project', 'version'));\n\t\t\t},\n\n\t\t\t'does not exist; returns true'() {\n\t\t\t\tconst { createHtmlApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createHtmlApiMissingFilter, false, path.join('directory', 'project', 'version'));\n\t\t\t}\n\t\t},\n\n\t\tcreateJsonApiMissingFilter: {\n\t\t\t'exists; returns false'() {\n\t\t\t\tconst { createJsonApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createJsonApiMissingFilter, true, path.join('directory', 'project-version.json'));\n\t\t\t},\n\n\t\t\t'does not exist; returns true'() {\n\t\t\t\tconst { createJsonApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createJsonApiMissingFilter, false, path.join('directory', 'project-version.json'));\n\t\t\t}\n\t\t},\n\n\t\tlatestFilter() {\n\t\t\tconst { latestFilter } = module;\n\t\t\tconst list = [ 'one', 'two', 'three' ];\n\t\t\tassert.deepEqual(list.filter(latestFilter), [ 'three' ]);\n\t\t},\n\n\t\tcreateVersionFilter: {\n\t\t\t'satisfies semver; returns true'() {\n\t\t\t\tconst { createVersionFilter } = module;\n\t\t\t\tconst filter = createVersionFilter('>= 2.0.0');\n\t\t\t\tassert.isTrue(filter({ name: '2.0.0' }));\n\t\t\t},\n\n\t\t\t'does not satisfy semver; returns false'() {\n\t\t\t\tconst { createVersionFilter } = module;\n\t\t\t\tconst filter = createVersionFilter('< 2.0.0');\n\t\t\t\tassert.isFalse(filter({ name: '2.0.0' }));\n\t\t\t}\n\t\t}\n\t},\n\n\tgetTags: (() => {\n\t\tlet getTags: any;\n\t\tlet mockGitHub: any;\n\n\t\treturn {\n\t\t\tbefore() {\n\t\t\t\tgetTags = module.default;\n\t\t\t\tmockGitHub = {\n\t\t\t\t\tfetchTags() {\n\t\t\t\t\t\treturn Promise.resolve([\n\t\t\t\t\t\t\t{ name: 'one' },\n\t\t\t\t\t\t\t{ name: '2.0.0' },\n\t\t\t\t\t\t\t{ name: '1.6.5' },\n\t\t\t\t\t\t\t{ name: '3.0.0-beta' }\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\ttests: {\n\t\t\tasync 'removes version not compatible with semver'() {\n\t\t\t\tconst tags = await getTags(mockGitHub);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ name: '1.6.5' },\n\t\t\t\t\t{ name: '2.0.0' },\n\t\t\t\t\t{ name: '3.0.0-beta' }\n\t\t\t\t];\n\t\t\t\tassert.deepEqual(tags, expected);\n\t\t\t},\n\n\t\t\tasync 'applies filters'() {\n\t\t\t\tconst filter = (tag: Tag) => {\n\t\t\t\t\treturn tag.name === '2.0.0';\n\t\t\t\t};\n\t\t\t\tconst tags = await getTags(mockGitHub, [ filter ]);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ name: '2.0.0' }\n\t\t\t\t];\n\t\t\t\tassert.deepEqual(tags, expected);\n\t\t\t}\n\t\t\t}\n\t\t};\n\t})()\n\t}\n});\n"]}