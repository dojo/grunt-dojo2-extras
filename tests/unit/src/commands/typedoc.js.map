{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../tests/unit/src/commands/typedoc.ts"],"names":[],"mappings":"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","sourcesContent":["import loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { spy, stub, SinonSpy, SinonStub } from 'sinon';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet typedoc: any;\nlet TypedocSpy: SinonSpy;\nconst dirnameStub = stub();\nconst expandInputFilesStub = stub();\nconst extnameStub = stub();\nconst findConfigFileStub = stub();\nconst generateDocsStub = stub();\nconst generateJsonStub = stub();\nconst mkdirpStub = stub();\nconst statSyncStub = stub();\n\nregisterSuite('commands/typedoc', {\n\tbefore() {\n\t\tconst Typedoc = class {\n\t\t\tbootstrapResult: any = { inputFiles: 'inputFiles' };\n\t\t\texpandInputFiles: SinonStub = expandInputFilesStub;\n\t\t\tgenerateDocs(project: any, out: any) {\n\t\t\t\treturn generateDocsStub(project, out);\n\t\t\t}\n\t\t\tgenerateJson(project: any, out: any) {\n\t\t\t\treturn generateJsonStub(project, out);\n\t\t\t}\n\t\t};\n\n\t\tTypedocSpy = spy(Typedoc);\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\ttypedoc = loadModule(require, '../../../../src/commands/typedoc', {\n\t\t\t'path': {\n\t\t\t\tdirname: dirnameStub,\n\t\t\t\textname: extnameStub\n\t\t\t},\n\t\t\t'mkdirp': {\n\t\t\t\tsync: mkdirpStub\n\t\t\t},\n\t\t\t'typedoc': {\n\t\t\t\tApplication: TypedocSpy\n\t\t\t},\n\t\t\t'fs': {\n\t\t\t\tstatSync: statSyncStub\n\t\t\t},\n\t\t\t'typescript': {\n\t\t\t\tfindConfigFile: findConfigFileStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tdirnameStub.reset();\n\t\texpandInputFilesStub.reset();\n\t\textnameStub.reset();\n\t\tfindConfigFileStub.reset();\n\t\tgenerateDocsStub.reset();\n\t\tgenerateJsonStub.reset();\n\t\tmkdirpStub.reset();\n\t\tstatSyncStub.reset();\n\t\tTypedocSpy.reset();\n\t},\n\n\ttests: {\n\t'typedoc': (() => {\n\t\treturn {\n\t\t\tasync 'opts.tsconfig is true'() {\n\t\t\t\tfindConfigFileStub.returns('tsconfig');\n\n\t\t\t\tawait assertTypedoc('source', 'target', { tsconfig: true });\n\n\t\t\t\tassert.isTrue(findConfigFileStub.calledOnce);\n\t\t\t},\n\n\t\t\tasync 'opts.tsconfig is false'() {\n\t\t\t\tconst isDirectoryStub = stub();\n\n\t\t\t\tstatSyncStub.returns({ isDirectory: isDirectoryStub });\n\n\t\t\t\tawait assertTypedoc('source', 'target', { tsconfig: false });\n\n\t\t\t\tassert.isTrue(isDirectoryStub.calledOnce);\n\t\t\t},\n\n\t\t\tasync 'target is JSON'() {\n\t\t\t\textnameStub.returns('.json');\n\n\t\t\t\tawait assertTypedoc('source', 'target.json', { tsconfig: true });\n\n\t\t\t\tassert.isTrue(dirnameStub.calledOnce);\n\t\t\t\tassert.isTrue(generateJsonStub.calledOnce);\n\t\t\t},\n\n\t\t\tasync 'target is not JSON'() {\n\t\t\t\textnameStub.returns('.file');\n\n\t\t\t\tawait assertTypedoc('source', 'target.file', { tsconfig: true });\n\n\t\t\t\tassert.isTrue(generateDocsStub.calledOnce);\n\t\t\t}\n\t\t};\n\n\t\tasync function assertTypedoc(source: string, target: string, opts: any) {\n\t\t\tawait typedoc(source, target, opts);\n\n\t\t\tassert.isTrue(TypedocSpy.calledOnce);\n\t\t\tassert.isTrue(expandInputFilesStub.calledOnce);\n\t\t\tassert.isTrue(extnameStub.calledOnce);\n\t\t\tassert.isTrue(mkdirpStub.calledOnce);\n\t\t}\n\t})()\n\t}\n});\n"]}