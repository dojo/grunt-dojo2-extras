{"version":3,"file":"log.js","sourceRoot":"","sources":["../../../../tests/unit/src/log.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,sCAAwC;IACxC,wCAA6C;IAC7C,mCAAwD;IAEhD,IAAA,2DAAa,CAAmC;IAChD,IAAA,wCAAM,CAA8B;IAE5C,IAAM,gBAAgB,GAA2C,EAAE,CAAC;IAEpE,aAAa,CAAC,KAAK,EAAE;QACpB,MAAM;YACL,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvC,gBAAgB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACpD,CAAC;YACD,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC;QAED,KAAK;YACJ,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACnB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;YACjD,CAAC;QACF,CAAC;QAED,KAAK,EAAE;YACD,SAAS;;;;wBACR,MAAM,GAAG,IAAI,oBAAU,CAAC,MAAM,EAAE,CAAC;wBACvC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;wBAE3B,QAAQ,GAAG,aAAa,CAAC;wBACzB,MAAM,GAAG,IAAI,eAAS,EAAE,CAAC;wBAE/B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBACvB,MAAM,CAAC,GAAG,EAAE,CAAC;wBAEb,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAQ,EAAE,WAAU,QAAW,CAAC,CAAC;;;;aACxE;SACA;KACD,CAAC,CAAC","sourcesContent":["import * as log from '../../../src/log';\nimport { LogStream } from '../../../src/log';\nimport { TransportInstance, transports } from 'winston';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nconst cachedTransports: { [ key: string ]: TransportInstance } = {};\n\nregisterSuite('log', {\n\tbefore() {\n\t\tfor (let key in log.logger.transports) {\n\t\t\tcachedTransports[key] = log.logger.transports[key];\n\t\t}\n\t\tlog.logger.clear();\n\t},\n\n\tafter() {\n\t\tlog.logger.clear();\n\t\tfor (let key in cachedTransports) {\n\t\t\tlog.logger.add(cachedTransports[key], {}, true);\n\t\t}\n\t},\n\n\ttests: {\n\tasync LogStream() {\n\t\tconst memory = new transports.Memory();\n\t\tlog.logger.add(memory, {}, true);\n\n\t\tconst expected = 'Hello World';\n\t\tconst stream = new LogStream();\n\n\t\tstream.write(expected);\n\t\tstream.end();\n\n\t\tassert.strictEqual(memory.writeOutput[0] as any, `info: ${ expected }`);\n\t}\n\t}\n});\n"]}