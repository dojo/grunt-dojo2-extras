{"version":3,"file":"streams.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/streams.ts"],"names":[],"mappings":"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","sourcesContent":["import * as streams from '../../../../src/util/streams';\nimport { Readable } from 'stream';\nimport { EventEmitter } from 'events';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nfunction assertReject(promise: Promise<any>) {\n\treturn promise.then(function () {\n\t\tthrow new Error('expected rejection');\n\t}, function () {\n\t\treturn;\n\t});\n}\n\nfunction createStream(data: string | Buffer): Readable {\n\tconst stream = new Readable();\n\tstream.push(data);\n\tstream.push(null);\n\treturn stream;\n}\n\nregisterSuite('util/streams', {\n\n\ttoString: {\n\t\t'stream is not readable; rejects'() {\n\t\t\tconst mock = {\n\t\t\t\treadable: false,\n\t\t\t\tisPaused() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn assertReject(streams.toString(<any> mock));\n\t\t},\n\n\t\t'stream throws error; rejects'() {\n\t\t\tconst mock: any = <any> new EventEmitter();\n\t\t\tmock.readable = true;\n\n\t\t\tconst promise = assertReject(streams.toString(mock));\n\t\t\tmock.emit('error', new Error());\n\n\t\t\treturn promise;\n\t\t},\n\n\t\tasync 'stream is converted to a string'() {\n\t\t\tconst expected = 'Hello World';\n\t\t\tconst stream = createStream(expected);\n\n\t\t\tconst value = await streams.toString(stream);\n\t\t\tassert.strictEqual(value, expected);\n\t\t},\n\n\t\tasync 'stream provides buffers'() {\n\t\t\tconst expected = 'Hello World';\n\t\t\tconst data = new Buffer(expected);\n\t\t\tconst stream = createStream(data);\n\n\t\t\tconst value = await streams.toString(stream);\n\t\t\tassert.strictEqual(value, expected);\n\t\t}\n\t},\n\n\tequal: {\n\t\t'stream a errors; rejects'() {\n\t\t\tconst mock: any = <any> new EventEmitter();\n\t\t\tconst b = new Readable();\n\n\t\t\tconst promise = assertReject(streams.equal(mock, b));\n\t\t\tmock.emit('error', new Error());\n\n\t\t\treturn promise;\n\t\t},\n\n\t\t'stream b errors; rejects'() {\n\t\t\tconst a = new Readable();\n\t\t\tconst mock: any = <any> new EventEmitter();\n\n\t\t\tconst promise = assertReject(streams.equal(a, mock));\n\t\t\tmock.emit('error', new Error());\n\n\t\t\treturn promise;\n\t\t},\n\n\t\t'stream a is longer than stream b; rejects'() {\n\t\t\tconst a = createStream('Hello World');\n\t\t\tconst b = createStream('Hello');\n\n\t\t\treturn assertReject(streams.equal(a, b));\n\t\t},\n\n\t\t'stream b is longer than stream a; rejects'() {\n\t\t\tconst b = createStream('Hello World');\n\t\t\tconst a = createStream('Hello');\n\n\t\t\treturn assertReject(streams.equal(a, b));\n\t\t},\n\n\t\t'stream a is different than stream b; rejects'() {\n\t\t\tconst b = createStream('Hello World');\n\t\t\tconst a = createStream('Hola World!');\n\n\t\t\treturn assertReject(streams.equal(a, b));\n\t\t},\n\n\t\t'streams are identical; resolves'() {\n\t\t\tconst b = createStream('Hello World');\n\t\t\tconst a = createStream('Hello World');\n\n\t\t\treturn streams.equal(a, b);\n\t\t}\n\t}\n});\n"]}