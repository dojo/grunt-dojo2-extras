{"version":3,"file":"process.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/process.ts"],"names":[],"mappings":"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","sourcesContent":["import { stub, SinonStub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport * as processUtil from '../../../../src/util/process';\nimport { throwWithError } from '../../../_support/util';\nimport { logger, LogStream } from '../../../../src/log';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet module: any;\nlet execStub: SinonStub;\nlet spawnStub: SinonStub;\n\nregisterSuite('util/process', {\n\tbefore() {\n\t\texecStub = stub();\n\t\tspawnStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule(require, '../../../../src/util/process', {\n\t\t\tchild_process: {\n\t\t\t\texec: execStub,\n\t\t\t\tspawn: spawnStub\n\t\t\t},\n\t\t\t'../log': {\n\t\t\t\tlogger,\n\t\t\t\tLogStream\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\texecStub.reset();\n\t\tspawnStub.reset();\n\t},\n\n\ttests: {\n\tpromisify: (() => {\n\t\tlet proc: any;\n\n\t\treturn {\n\t\t\tbeforeEach() {\n\t\t\t\tproc = {\n\t\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\t\tstderr: { pipe: stub() },\n\t\t\t\t\ton: stub()\n\t\t\t\t};\n\n\t\t\t\tstub(processUtil, 'exec').returns(proc);\n\t\t\t},\n\n\t\t\tafterEach() {\n\t\t\t\t(<SinonStub> processUtil.exec).restore();\n\t\t\t},\n\n\t\t\ttests: {\n\t\t\tasync 'eventually resolves the returned promise'() {\n\t\t\t\tconst promise = processUtil.promisify(processUtil.exec('test'));\n\n\t\t\t\tproc.on.lastCall.args[1](0);\n\t\t\t\tassert.equal(proc, await promise);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\n\t\t\t'child process exits with code other than 0; eventually rejects the returned promise'() {\n\t\t\t\tlet promise;\n\n\t\t\t\tpromise = processUtil.promisify(processUtil.exec('test'));\n\n\t\t\t\tproc.on.lastCall.args[1](1);\n\t\t\t\treturn promise.then(\n\t\t\t\t\tthrowWithError('promise should reject'),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tassert.strictEqual(e.message, 'Process exited with a code of 1');\n\t\t\t\t\t\tassert.strictEqual(process.exitCode, 1);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\t}\n\t\t};\n\t})(),\n\n\texec: {\n\t\t'execChild is called, options not applied; execChild\\'s value is returned'() {\n\t\t\tlet value = 'ls';\n\n\t\t\texecStub.returns(value);\n\n\t\t\tlet proc = module.exec(value, { silent: true });\n\n\t\t\tassert.isTrue(execStub.calledOnce);\n\t\t\tassert.strictEqual(proc, value);\n\t\t},\n\n\t\t'options applied after execChild is called'() {\n\t\t\t// required for the internal named function `applyOptions`\n\t\t\texecStub.returns({\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() }\n\t\t\t});\n\n\t\t\tconst proc = module.exec('ls', { silent: false });\n\n\t\t\tassert.isTrue(proc.stdout.pipe.calledOnce);\n\t\t\tassert.isTrue(proc.stderr.pipe.calledOnce);\n\t\t\tassert.instanceOf(proc.stdout.pipe.lastCall.args[0], LogStream);\n\t\t\tassert.instanceOf(proc.stderr.pipe.lastCall.args[0], LogStream);\n\t\t}\n\t},\n\n\tpromiseExec: (() => {\n\t\treturn {\n\t\t\t'options not applied'() {\n\t\t\t\tconst promise = testExec();\n\n\t\t\t\tassert.equal(execStub.lastCall.args[1].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent = true'() {\n\t\t\t\tconst promise = testExec({ silent: true });\n\n\t\t\t\tassert.equal(execStub.lastCall.args[1].silent, true);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent undefined'() {\n\t\t\t\tconst promise = testExec({});\n\n\t\t\t\tassert.equal(execStub.lastCall.args[1].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t}\n\t\t};\n\n\t\tasync function testExec(opts?: any) {\n\t\t\tconst proc = {\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() },\n\t\t\t\ton: stub()\n\t\t\t};\n\n\t\t\texecStub.returns(proc);\n\n\t\t\tconst promise = module.promiseExec('test', opts);\n\n\t\t\tassert.isTrue(proc.on.called);\n\t\t\tassert.instanceOf(promise, Promise);\n\t\t\tassert.isTrue(proc.on.calledWith('close'));\n\n\t\t\tproc.on.lastCall.args[1](0);\n\t\t\tassert.equal(proc, await promise);\n\n\t\t\treturn promise;\n\t\t}\n\t})(),\n\n\tspawn: {\n\t\t'spawnChild is called, the return value of which is returned; options not applied'() {\n\t\t\tlet value = 'ls';\n\n\t\t\tspawnStub.returns(value);\n\n\t\t\tlet proc = module.spawn(value, [ '-l' ], { silent: true });\n\n\t\t\tassert.isTrue(spawnStub.calledOnce);\n\t\t\tassert.strictEqual(proc, value);\n\t\t},\n\n\t\t'options applied after spawnChild is called'() {\n\t\t\t// required for the internal named function `applyOptions`\n\t\t\tspawnStub.returns({\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() }\n\t\t\t});\n\n\t\t\tconst proc = module.spawn('ls', [ '-l' ], { silent: false });\n\n\t\t\tassert.isTrue(proc.stdout.pipe.calledOnce);\n\t\t\tassert.isTrue(proc.stderr.pipe.calledOnce);\n\t\t\tassert.instanceOf(proc.stdout.pipe.lastCall.args[0], LogStream);\n\t\t\tassert.instanceOf(proc.stderr.pipe.lastCall.args[0], LogStream);\n\t\t}\n\t},\n\n\tpromiseSpawn: (() => {\n\t\treturn {\n\t\t\t'options not applied'() {\n\t\t\t\tconst promise = testSpawn();\n\n\t\t\t\tassert.equal(spawnStub.lastCall.args[2].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent = true'() {\n\t\t\t\tconst promise = testSpawn({ silent: true });\n\n\t\t\t\tassert.equal(spawnStub.lastCall.args[2].silent, true);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent undefined'() {\n\t\t\t\tconst promise = testSpawn({});\n\n\t\t\t\tassert.equal(spawnStub.lastCall.args[2].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t}\n\t\t};\n\n\t\tasync function testSpawn(opts?: any) {\n\t\t\tconst proc = {\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() },\n\t\t\t\ton: stub()\n\t\t\t};\n\n\t\t\tspawnStub.returns(proc);\n\n\t\t\tconst promise = module.promiseSpawn('test', [ 'arg' ], opts);\n\n\t\t\tassert.isTrue(proc.on.called);\n\t\t\tassert.instanceOf(promise, Promise);\n\t\t\tassert.isTrue(proc.on.calledWith('close'));\n\n\t\t\tproc.on.lastCall.args[1](0);\n\t\t\tassert.equal(proc, await promise);\n\n\t\t\treturn promise;\n\t\t}\n\t})()\n\t}\n});\n"]}