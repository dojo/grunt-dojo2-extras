{"version":3,"file":"GitHub.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/GitHub.ts"],"names":[],"mappings":"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","sourcesContent":["import loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { spy, stub, SinonSpy, SinonStub } from 'sinon';\nimport GitHub from '../../../../src/util/GitHub';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet Module: any;\nlet github: GitHub;\nlet githubAuthStub: SinonStub;\nlet hasGitCredentialsStub: SinonStub;\nlet authorizationGetAllStub: SinonStub;\nlet GitHubApiSpy: SinonSpy;\n\nregisterSuite('util/GitHub', {\n\tbefore() {\n\t\tgithubAuthStub = stub();\n\t\thasGitCredentialsStub = stub();\n\t\tauthorizationGetAllStub = stub();\n\n\t\tconst GitHubApi = class {\n\t\t\tget auth() {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tauthenticate: SinonStub = stub();\n\t\t\tauthorization = {\n\t\t\t\tcreate: stub().returns({ data: 'create' }),\n\t\t\t\tdelete: stub(),\n\t\t\t\tgetAll: authorizationGetAllStub\n\t\t\t};\n\t\t\trepos = {\n\t\t\t\tcreateKey: stub().returns({ data: 'createKey' }),\n\t\t\t\tdeleteKey: stub(),\n\t\t\t\tgetTags: stub().returns({ data: 'getTags' })\n\t\t\t};\n\t\t};\n\n\t\tGitHubApiSpy = spy(GitHubApi);\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tModule = loadModule(require, '../../../../src/util/GitHub', {\n\t\t\t'./environment': {\n\t\t\t\tgithubAuth: githubAuthStub,\n\t\t\t\thasGitCredentials: hasGitCredentialsStub\n\t\t\t},\n\t\t\t'github': GitHubApiSpy\n\t\t});\n\n\t\tgithub = new Module('dojo', 'grunt-dojo2-extras');\n\t},\n\n\tafterEach() {\n\t\tgithubAuthStub.reset();\n\t\thasGitCredentialsStub.reset();\n\t\tauthorizationGetAllStub.reset();\n\t\tGitHubApiSpy.reset();\n\t},\n\n\ttests: {\n\t'constructor': {\n\t\t'without owner; throws Error'() {\n\t\t\ttry {\n\t\t\t\tnew Module();\n\t\t\t} catch (e) {\n\t\t\t\tassert.equal(e.message, 'A repo owner must be specified');\n\t\t\t}\n\t\t},\n\n\t\t'without name; throws Error'() {\n\t\t\ttry {\n\t\t\t\tnew Module('dojo');\n\t\t\t} catch (e) {\n\t\t\t\tassert.equal(e.message, 'A repo name must be specified');\n\t\t\t}\n\t\t},\n\n\t\t'properly initialized; _api, owner, and name set'() {\n\t\t\tassert.isTrue(GitHubApiSpy.calledOnce);\n\t\t\tassert.strictEqual(github.owner, 'dojo');\n\t\t\tassert.strictEqual(github.name, 'grunt-dojo2-extras');\n\t\t}\n\t},\n\n\t'get api'() {\n\t\tgithub.isApiAuthenticated = stub();\n\n\t\tconst api = github.api;\n\n\t\tassert.strictEqual(api, github._api);\n\t},\n\n\t'get url': (() => {\n\t\treturn {\n\t\t\t'has git credentials; returns ssh url'() {\n\t\t\t\tconst getSshUrl = stub(github, 'getSshUrl');\n\n\t\t\t\thasGitCredentialsStub.returns(true);\n\n\t\t\t\tassertCredentials();\n\n\t\t\t\tassert.isTrue(getSshUrl.calledOnce);\n\n\t\t\t\tgetSshUrl.reset();\n\t\t\t},\n\n\t\t\t'doesn\\'t have git credentials; returns https url'() {\n\t\t\t\tconst getHttpsUrl = stub(github, 'getHttpsUrl');\n\n\t\t\t\thasGitCredentialsStub.returns(false);\n\n\t\t\t\tassertCredentials();\n\n\t\t\t\tassert.isTrue(getHttpsUrl.calledOnce);\n\n\t\t\t\tgetHttpsUrl.reset();\n\t\t\t}\n\t\t};\n\n\t\tfunction assertCredentials() {\n\t\t\tconst url = github.url;\n\n\t\t\tassert.isTrue(hasGitCredentialsStub.calledOnce);\n\n\t\t\treturn url;\n\t\t}\n\t})(),\n\n\tasync createAuthorization() {\n\t\tconst createAuth = await github.createAuthorization({});\n\n\t\tassert.strictEqual(createAuth as any, 'create');\n\t},\n\n\tasync createKey() {\n\t\tconst createKey = await github.createKey('key');\n\t\tconst api = GitHubApiSpy.lastCall.returnValue;\n\n\t\tassert.strictEqual(createKey, 'createKey');\n\t\tassert.strictEqual(api.repos.createKey.lastCall.args[0].key, 'key');\n\t},\n\n\tdeleteAuthorization: (() => {\n\t\treturn {\n\t\t\tasync 'given numeric id; deleteAuthorization passes it as a string'() {\n\t\t\t\tconst api = await deleteAuthReturnSpy(2);\n\n\t\t\t\tassert.strictEqual(api.authorization.delete.lastCall.args[0].id, '2');\n\t\t\t},\n\n\t\t\tasync 'given string id; deleteAuthorization passes it intact'() {\n\t\t\t\tconst api = await deleteAuthReturnSpy('id');\n\n\t\t\t\tassert.strictEqual(api.authorization.delete.lastCall.args[0].id, 'id');\n\t\t\t}\n\t\t};\n\n\t\tasync function deleteAuthReturnSpy(id: string | number) {\n\t\t\tawait github.deleteAuthorization(id);\n\n\t\t\treturn GitHubApiSpy.lastCall.returnValue;\n\t\t}\n\t})(),\n\n\tdeleteKey: (() => {\n\t\treturn {\n\t\t\tasync 'given numeric id; deleteKey passes it as a string'() {\n\t\t\t\tconst api = await deleteKeyReturnSpy(2);\n\n\t\t\t\tassert.strictEqual(api.repos.deleteKey.lastCall.args[0].id, '2');\n\t\t\t},\n\n\t\t\tasync 'given string id; deleteKey passes it intact'() {\n\t\t\t\tconst api = await deleteKeyReturnSpy('id');\n\n\t\t\t\tassert.strictEqual(api.repos.deleteKey.lastCall.args[0].id, 'id');\n\t\t\t}\n\t\t};\n\n\t\tasync function deleteKeyReturnSpy(id: string | number) {\n\t\t\tawait github.deleteKey(id);\n\n\t\t\treturn GitHubApiSpy.lastCall.returnValue;\n\t\t}\n\t})(),\n\n\tasync fetchTags() {\n\t\tconst fetchTags = await github.fetchTags();\n\t\tconst api = GitHubApiSpy.lastCall.returnValue;\n\n\t\tassert.strictEqual(fetchTags as any, 'getTags');\n\t\tassert.isTrue(api.repos.getTags.calledOnce);\n\t},\n\n\tfindAuthorization: (() => {\n\t\tconst findAuthParams = {\n\t\t\tnote: 'temporary token for travis cli',\n\t\t\tscopes: [\n\t\t\t\t'read:org', 'user:email', 'repo_deployment', 'repo:status', 'public_repo', 'write:repo_hook'\n\t\t\t]\n\t\t};\n\t\tconst scope = { scopes: [ 'read:org' ] };\n\t\tconst note = { note: 'temporary token for travis cli' };\n\n\t\treturn {\n\t\t\tasync 'api.authorization.getAll returns no data; returns undefined'() {\n\t\t\t\tauthorizationGetAllStub.returns({});\n\n\t\t\t\tconst authGetAll = await assertAuthGetAllCalled({});\n\n\t\t\t\tassert.isUndefined(authGetAll);\n\t\t\t},\n\n\t\t\t// \tbranch params[name] is array\n\t\t\t// \t\tbranch auth[name] isn't array\n\t\t\t// \t\tbranch auth[name] is array\n\t\t\t// \t\t\tmember of params[name] exists in auth[name]\n\t\t\t// \tbranch params[name] not array\n\t\t\t// \t\tbranch expected === actual\n\t\t\t// \t\tbranch expected !== actual\n\t\t\t'api.authorization.getAll returns array of data': {\n\t\t\t\tasync 'getAll response data contain an array similar to params array member'() {\n\t\t\t\t\tauthorizationGetAllStub.returns({ data: [ findAuthParams ] });\n\n\t\t\t\t\tconst AuthGetAll = await assertAuthGetAllCalled(scope);\n\n\t\t\t\t\tassert.strictEqual(AuthGetAll, findAuthParams as any);\n\t\t\t\t},\n\n\t\t\t\tasync 'getAll response data do not contain an array'() {\n\t\t\t\t\tauthorizationGetAllStub.returns({ data: [ note ] });\n\n\t\t\t\t\tconst AuthGetAll = await assertAuthGetAllCalled(note);\n\n\t\t\t\t\tassert.strictEqual(AuthGetAll, note);\n\t\t\t\t},\n\n\t\t\t\tasync 'findAuthorization params contain no array'() {\n\t\t\t\t\tauthorizationGetAllStub.returns({ data: [ findAuthParams ] });\n\n\t\t\t\t\tconst AuthGetAll = await assertAuthGetAllCalled(note);\n\n\t\t\t\t\tassert.strictEqual(AuthGetAll, findAuthParams as any);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tasync function assertAuthGetAllCalled(params: any) {\n\t\t\tconst findAuth = await github.findAuthorization(params);\n\n\t\t\tassert.isTrue(authorizationGetAllStub.calledOnce);\n\n\t\t\treturn findAuth;\n\t\t}\n\t})(),\n\n\tisApiAuthenticated: {\n\t\t'not authenticated; calls githubAuth': {\n\t\t\t'githubAuth returns truthy; calls this._api.authenticate with return value'() {\n\t\t\t\tconst authValue = { user: 'dojo' };\n\n\t\t\t\tgithubAuthStub.returns(authValue);\n\n\t\t\t\tgithub.isApiAuthenticated();\n\n\t\t\t\tconst git = GitHubApiSpy.lastCall.returnValue;\n\n\t\t\t\tassert.isTrue(git.authenticate.calledOnce);\n\t\t\t\tassert.isTrue(git.authenticate.calledWith(authValue));\n\t\t\t},\n\n\t\t\t'githubAuth returns falsy; this._api.authenticate not called'() {\n\t\t\t\tgithub.isApiAuthenticated();\n\n\t\t\t\tconst git = GitHubApiSpy.lastCall.returnValue;\n\n\t\t\t\tassert.isTrue(git.authenticate.notCalled);\n\t\t\t}\n\t\t},\n\n\t\t'authenticated after first call; subsequent calls simply return API has OAuth token'() {\n\t\t\tlet authed = github.isApiAuthenticated();\n\n\t\t\tassert.isTrue(authed);\n\n\t\t\tauthed = github.isApiAuthenticated();\n\n\t\t\tassert.isTrue(authed);\n\t\t\tassert.isTrue(githubAuthStub.calledOnce);\n\t\t}\n\t},\n\n\tgetHttpsUrl() {\n\t\tconst getHttpsUrl = github.getHttpsUrl();\n\n\t\tassert.strictEqual(getHttpsUrl, 'https://github.com/dojo/grunt-dojo2-extras.git');\n\t},\n\n\tgetSshUrl() {\n\t\tconst getSshUrl = github.getSshUrl();\n\n\t\tassert.strictEqual(getSshUrl, 'git@github.com:dojo/grunt-dojo2-extras.git');\n\t},\n\n\ttoString() {\n\t\tconst toString = github.toString();\n\n\t\tassert.strictEqual(toString, 'dojo/grunt-dojo2-extras');\n\t}\n\t}\n});\n"]}