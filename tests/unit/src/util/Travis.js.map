{"version":3,"file":"Travis.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/Travis.ts"],"names":[],"mappings":"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","sourcesContent":["import loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\nimport Travis, { Repository } from '../../../../src/util/Travis';\nimport { throwWithError } from '../../../_support/util';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet module: any;\nlet travis: Travis;\nlet repository: Repository;\nlet requestStub: SinonStub & Partial<{ get: SinonStub, post: SinonStub }>;\n\nregisterSuite('util/Travis', {\n\tbefore() {\n\t\trequestStub = stub() as SinonStub & Partial<{ get: SinonStub, post: SinonStub }>;\n\t\trequestStub.post = stub();\n\t\trequestStub.get = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule(require, '../../../../src/util/Travis', {\n\t\t\t'@dojo/core/request': { default: requestStub }\n\t\t}, false);\n\t},\n\n\tafterEach() {\n\t\trequestStub.reset();\n\t\trequestStub.post!.reset();\n\t\trequestStub.get.reset();\n\t},\n\n\ttests: {\n\t'Travis': {\n\t\tbeforeEach() {\n\t\t\ttravis = new module.default();\n\t\t},\n\n\t\ttests: {\n\t\tasync authenticate() {\n\t\t\tconst token = 'token';\n\t\t\tconst accessToken = 'access_token';\n\t\t\tconst post = requestStub.post!;\n\n\t\t\tpost.returns(Promise.resolve({ json: () => Promise.resolve<{ access_token: string }>({ 'access_token': accessToken }) }));\n\n\t\t\tconst authenticate = await travis.authenticate(token);\n\n\t\t\tassert.strictEqual(post.lastCall.args[1].body, '{\"github_token\":\"token\"}');\n\t\t\tassert.strictEqual(travis.token, accessToken);\n\t\t\tassert.strictEqual(authenticate, accessToken);\n\t\t},\n\n\t\tcreateAuthorization: (() => {\n\t\t\tlet repo: any;\n\t\t\tconst tokenAuth = { token: 'token' };\n\n\t\t\treturn {\n\t\t\t\tbeforeEach() {\n\t\t\t\t\trepo = {\n\t\t\t\t\t\tcreateAuthorization: stub().returns(Promise.resolve(tokenAuth)),\n\t\t\t\t\t\tfindAuthorization: stub().returns(Promise.resolve())\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tafterEach() {\n\t\t\t\t\trepo.createAuthorization.reset();\n\t\t\t\t\trepo.findAuthorization.reset();\n\t\t\t\t},\n\n\t\t\t\ttests: {\n\t\t\t\t'existing authorization; eventually throws'() {\n\t\t\t\t\trepo.findAuthorization.returns(Promise.resolve({ id: 1 }));\n\n\t\t\t\t\tconst promise = travis.createAuthorization(repo);\n\n\t\t\t\t\treturn promise.then(\n\t\t\t\t\t\tthrowWithError('Should reject when an authorization exists'),\n\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\tassert.strictEqual(e.message, 'An existing authorization exists. \"#1\"');\n\t\t\t\t\t\t\tassert.isTrue(repo.createAuthorization.notCalled);\n\t\t\t\t\t\t\tassert.isTrue(repo.findAuthorization.calledOnce);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t},\n\n\t\t\t\tasync 'authentication succeeds'() {\n\t\t\t\t\tconst auth = stub(travis, 'authenticate').returns(Promise.resolve());\n\t\t\t\t\tconst deleteAuth = stub(travis, 'deleteAuthorization');\n\n\t\t\t\t\tawait travis.createAuthorization(repo);\n\n\t\t\t\t\tassert.isTrue(repo.createAuthorization.calledOnce);\n\t\t\t\t\tassert.isTrue(auth.calledOnce);\n\t\t\t\t\tassert.isTrue(deleteAuth.notCalled);\n\t\t\t\t\tassert.isTrue(travis.isAuthorized());\n\n\t\t\t\t\tauth.restore();\n\t\t\t\t\tdeleteAuth.restore();\n\t\t\t\t},\n\n\t\t\t\tasync 'authentication fails; eventually throws'() {\n\t\t\t\t\tconst auth = stub(travis, 'authenticate').returns(Promise.reject(undefined));\n\t\t\t\t\tconst deleteAuth = stub(travis, 'deleteAuthorization').returns(Promise.resolve());\n\n\t\t\t\t\treturn travis.createAuthorization(repo).then(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tauth.restore();\n\t\t\t\t\t\t\tdeleteAuth.restore();\n\t\t\t\t\t\t\tthrow new Error('Should reject when authentication fails');\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tauth.restore();\n\t\t\t\t\t\t\tdeleteAuth.restore();\n\t\t\t\t\t\t\tassert.isTrue(auth.calledOnce);\n\t\t\t\t\t\t\tassert.isTrue(deleteAuth.calledOnce);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\n\t\tdeleteAuthorization: (() => {\n\t\t\tlet repo: any;\n\n\t\t\treturn {\n\t\t\t\tbeforeEach() {\n\t\t\t\t\trepo = {\n\t\t\t\t\t\tdeleteAuthorization: stub()\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tafterEach() {\n\t\t\t\t\trepo.deleteAuthorization.reset();\n\t\t\t\t},\n\n\t\t\t\ttests: {\n\t\t\t\tasync 'not authorized'() {\n\t\t\t\t\tawait travis.deleteAuthorization(repo);\n\n\t\t\t\t\tassert.isTrue(repo.deleteAuthorization.notCalled);\n\t\t\t\t},\n\n\t\t\t\tasync 'authorized'() {\n\t\t\t\t\tconst create = stub(travis, 'createAuthorization', function(this: any) {\n\t\t\t\t\t\tthis.githubAuthorization = { id: 1 };\n\t\t\t\t\t}.bind(travis));\n\n\t\t\t\t\tcreate();\n\t\t\t\t\tawait travis.deleteAuthorization(repo);\n\n\t\t\t\t\tassert.isTrue(repo.deleteAuthorization.calledOnce);\n\t\t\t\t\tassert.isTrue(repo.deleteAuthorization.calledWith(1));\n\n\t\t\t\t\tcreate.restore();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\n\t\tfetchRepository: {\n\t\t\tasync authorized() {\n\t\t\t\trequestStub.get.returns(Promise.resolve({\n\t\t\t\t\tjson: () => Promise.resolve<{ repo: string }>({\n\t\t\t\t\t\trepo: 'repo'\n\t\t\t\t\t})\n\t\t\t\t}));\n\n\t\t\t\ttravis.token = 'token';\n\t\t\t\tconst fetchRepository = await travis.fetchRepository('slug');\n\n\t\t\t\tassert.isTrue(requestStub.get.calledOnce);\n\t\t\t\tassert.instanceOf(fetchRepository, module.Repository);\n\t\t\t},\n\n\t\t\tasync 'not authorized'() {\n\t\t\t\treturn travis.fetchRepository('slug')\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.fail('Should not have resolved');\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {});\n\t\t\t}\n\t\t},\n\n\t\tisAuthorized: {\n\t\t\t'authorized'() {\n\t\t\t\tconst create = stub(travis, 'createAuthorization', function(this: any) {\n\t\t\t\t\tthis.githubAuthorization = { id: 1 };\n\t\t\t\t}.bind(travis));\n\n\t\t\t\tcreate();\n\n\t\t\t\tassert.isTrue(travis.isAuthorized());\n\n\t\t\t\tcreate.restore();\n\t\t\t},\n\n\t\t\t'not authorized'() {\n\t\t\t\tassert.isFalse(travis.isAuthorized());\n\t\t\t}\n\t\t}\n\t\t}\n\t},\n\n\t'Repository': (() => {\n\t\ttype EnvVar = {\n\t\t\tid: string;\n\t\t\tname: string;\n\t\t\tvalue: string;\n\t\t\t'public': boolean;\n\t\t\trepository_id: number;\n\t\t};\n\t\tconst envVarArr: EnvVar[] = [{\n\t\t\tid: 'id',\n\t\t\tname: 'name',\n\t\t\tvalue: 'value',\n\t\t\t'public': true,\n\t\t\trepository_id: 1\n\t\t}];\n\t\tconst repo = {\n\t\t\tactive: 'active',\n\t\t\tid: 'grunt-dojo2-extras',\n\t\t\tslug: 'extras'\n\t\t};\n\t\tconst token = 'access_token';\n\n\t\treturn {\n\t\t\tbeforeEach() {\n\t\t\t\trepository = new module.Repository(token, repo);\n\t\t\t},\n\n\t\t\ttests: {\n\t\t\t'constructor'() {\n\t\t\t\tassert.isTrue(repository.active);\n\t\t\t\tassert.strictEqual(`${repository.id}`, `${repo.id}`);\n\t\t\t\tassert.strictEqual(repository.slug, repo.slug);\n\t\t\t\tassert.strictEqual(repository.token, token);\n\t\t\t},\n\n\t\t\tasync listEnvironmentVariables() {\n\t\t\t\trequestStub.get.returns(Promise.resolve({\n\t\t\t\t\tjson: () => Promise.resolve<{ env_vars: Promise<EnvVar[]> }>({\n\t\t\t\t\t\t'env_vars': Promise.resolve(envVarArr)\n\t\t\t\t\t})\n\t\t\t\t}));\n\n\t\t\t\tconst envVars = await repository.listEnvironmentVariables();\n\n\t\t\t\tassert.isTrue(requestStub.get.calledOnce);\n\t\t\t\tassert.strictEqual(envVars, envVarArr);\n\t\t\t},\n\n\t\t\tsetEnvironmentVariables: (() => {\n\t\t\t\tlet envVars: any;\n\n\t\t\t\treturn {\n\t\t\t\t\tbeforeEach() {\n\t\t\t\t\t\tenvVars = stub(repository, 'listEnvironmentVariables').returns(Promise.resolve(envVarArr));\n\t\t\t\t\t},\n\n\t\t\t\t\tafterEach() {\n\t\t\t\t\t\tenvVars.restore();\n\t\t\t\t\t},\n\n\t\t\t\t\ttests: {\n\t\t\t\t\tasync 'update existing variable'() {\n\t\t\t\t\t\trequestStub.returns(Promise.resolve({ json: () => {}}));\n\n\t\t\t\t\t\tawait repository.setEnvironmentVariables({\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tvalue: 'new value'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tassert.isTrue(requestStub.calledOnce);\n\t\t\t\t\t},\n\n\t\t\t\t\tasync 'add new environment variable'() {\n\t\t\t\t\t\trequestStub.post!.returns(Promise.resolve({ json: () => {}}));\n\n\t\t\t\t\t\tawait repository.setEnvironmentVariables({\n\t\t\t\t\t\t\tname: 'new name',\n\t\t\t\t\t\t\tvalue: 'value'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tassert.isTrue(requestStub.post!.calledOnce);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t})()\n\t\t\t}\n\t\t};\n\t})()\n\t}\n});\n"]}