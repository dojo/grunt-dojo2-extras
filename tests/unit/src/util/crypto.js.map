{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/crypto.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,iCAAkC;IAClC,yBAAgC;IAChC,uDAAqD;IACrD,oDAAsD;IAE9C,IAAA,2DAAa,CAAmC;IAChD,IAAA,wCAAM,CAA8B;IAE5C,aAAa,CAAC,aAAa,EAAE;QAEtB,eAAe;;;;;;4BACd,GAAG,GAAG,kBAAO,CAAC,WAAW,CAAC,CAAC;4BACpB,WAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAA;;4BAAlC,IAAI,GAAG,SAA2B;4BAExC,MAAM,CAAC,MAAM,CAAC,eAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;4BAC1C,MAAM,CAAC,MAAM,CAAC,eAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;;;SAC3C;QAEK,OAAO;;;;;;4BACN,QAAQ,GAAG,cAAc,CAAC;4BACjB,WAAM,IAAI,OAAO,CAAC,UAAU,OAAO;oCACjD,IAAI,GAAG,GAAG,EAAE,CAAC;oCACb,IAAM,MAAM,GAAG,IAAI,iBAAQ,EAAE,CAAC;oCAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCAClB,IAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACvC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;yCAChD,EAAE,CAAC,MAAM,EAAE,UAAU,KAAa;wCAClC,GAAG,IAAI,KAAK,CAAC;oCACd,CAAC,CAAC;yCACD,EAAE,CAAC,KAAK,EAAE;wCACV,OAAO,CAAC,GAAG,CAAC,CAAC;oCACd,CAAC,CAAC,CAAC;gCACL,CAAC,CAAC,EAAA;;4BAbI,MAAM,GAAG,SAab;4BACF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;;;;SACrC;KACD,CAAC,CAAC","sourcesContent":["import { Readable } from 'stream';\nimport { existsSync } from 'fs';\nimport { tmpFile } from '../../../_support/tmpFiles';\nimport * as crypto from '../../../../src/util/crypto';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nregisterSuite('util/crypto', {\n\n\tasync createDeployKey() {\n\t\tconst tmp = tmpFile('deployKey');\n\t\tconst keys = await crypto.createKey(tmp);\n\n\t\tassert.isTrue(existsSync(keys.publicKey));\n\t\tassert.isTrue(existsSync(keys.privateKey));\n\t},\n\n\tasync encrypt() {\n\t\tconst expected = 'Hello World!';\n\t\tconst result = await new Promise(function (resolve) {\n\t\t\tlet out = '';\n\t\t\tconst stream = new Readable();\n\t\t\tstream.push(expected);\n\t\t\tstream.push(null);\n\t\t\tconst enc = crypto.encryptData(stream);\n\t\t\tcrypto.decryptData(enc.encrypted, enc.key, enc.iv)\n\t\t\t\t.on('data', function (chunk: string) {\n\t\t\t\t\tout += chunk;\n\t\t\t\t})\n\t\t\t\t.on('end', function () {\n\t\t\t\t\tresolve(out);\n\t\t\t\t});\n\t\t});\n\t\tassert.strictEqual(result, expected);\n\t}\n});\n"]}