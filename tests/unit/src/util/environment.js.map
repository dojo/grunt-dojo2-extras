{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/environment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as environment from '../../../../src/util/environment';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nconst file = 'test.file';\n\nlet mappedEnvs: { name: string; value: string; }[];\n\nlet module: any;\nlet existsSyncStub: SinonStub;\n\nregisterSuite('util/environment', {\n\tbefore() {\n\t\tconst relevantEnv = [\n\t\t\t'TRAVIS_COMMIT_MESSAGE',\n\t\t\t'TRAVIS_BRANCH',\n\t\t\t'ENCRYPTED_KEY_FILE',\n\t\t\t'TRAVIS_COMMIT',\n\t\t\t'HAS_GIT_CREDENTIALS',\n\t\t\t'HEXO_ROOT',\n\t\t\t'TRAVIS_EVENT_TYPE',\n\t\t\t'KEY_FILE',\n\t\t\t'DEPLOY_DOCS',\n\t\t\t'PUBLISH_TARGET_REPO',\n\t\t\t'TRAVIS_REPO_SLUG'\n\t\t];\n\n\t\tmappedEnvs = relevantEnv.map((name) => ({ name, value: process.env[name] }));\n\n\t\texistsSyncStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule(require, '../../../../src/util/environment', {\n\t\t\tfs: {\n\t\t\t\texistsSync: existsSyncStub\n\t\t\t}\n\t\t}, false);\n\t},\n\n\tafterEach() {\n\t\tmappedEnvs.forEach((val) => {\n\t\t\tif (val.value) {\n\t\t\t\tprocess.env[val.name] = val.value;\n\t\t\t} else {\n\t\t\t\tdelete process.env[val.name];\n\t\t\t}\n\t\t});\n\n\t\texistsSyncStub.reset();\n\t},\n\n\ttests: {\n\tcommitMessage() {\n\t\tconst expected = 'update test coverage for `util/environment`';\n\t\tprocess.env.TRAVIS_COMMIT_MESSAGE = expected;\n\t\tassert.equal(environment.commitMessage(), expected);\n\t},\n\n\tcurrentBranch() {\n\t\tconst expected = 'master';\n\t\tprocess.env.TRAVIS_BRANCH = expected;\n\t\tassert.equal(environment.currentBranch(), expected);\n\t},\n\n\tencryptedKeyFile: {\n\t\t'returns ENCRYPTED_KEY_FILE'() {\n\t\t\tconst filename = 'keyfile';\n\t\t\tconst fileWithExt = filename + '.enc';\n\n\t\t\tdelete process.env.KEY_FILE;\n\t\t\tprocess.env.ENCRYPTED_KEY_FILE = fileWithExt;\n\t\t\tassert.equal(environment.encryptedKeyFile(), fileWithExt);\n\t\t},\n\n\t\t'returns value passed'() {\n\t\t\tconst filename = 'keyfile';\n\t\t\tconst fileWithExt = filename + '.enc';\n\n\t\t\tdelete process.env.ENCRYPTED_KEY_FILE;\n\t\t\tassert.equal(environment.encryptedKeyFile(filename), fileWithExt);\n\t\t},\n\n\t\t'returns default encrypted key file'() {\n\t\t\tconst keyFileDefault = 'deploy_key.enc';\n\n\t\t\tdelete process.env.ENCRYPTED_KEY_FILE;\n\t\t\tdelete process.env.KEY_FILE;\n\t\t\tassert.equal(environment.encryptedKeyFile(), keyFileDefault);\n\t\t}\n\t},\n\n\tgitCommit() {\n\t\tconst hash = 'ad64g9cc';\n\t\tprocess.env.TRAVIS_COMMIT = hash;\n\t\tassert.equal(environment.gitCommit(), hash);\n\t},\n\n\thasGitCredentials: {\n\t\t'HAS_GIT_CREDENTIALS set: returns true'() {\n\t\t\tprocess.env.HAS_GIT_CREDENTIALS = 'true';\n\t\t\tassert.isTrue(module.hasGitCredentials());\n\t\t},\n\n\t\t'Running on Travis; no key file: returns false'() {\n\t\t\texistsSyncStub.returns(false);\n\n\t\t\tdelete process.env.HAS_GIT_CREDENTIALS;\n\t\t\tprocess.env.TRAVIS_BRANCH = 'master';\n\n\t\t\tassert.isFalse(module.hasGitCredentials(file));\n\t\t},\n\n\t\t'Running on Travis; with key file: returns true'() {\n\t\t\texistsSyncStub.returns(true);\n\n\t\t\tdelete process.env.HAS_GIT_CREDENTIALS;\n\t\t\tprocess.env.TRAVIS_BRANCH = 'master';\n\n\t\t\tassert.isTrue(module.hasGitCredentials(file));\n\t\t\tassert.isTrue(existsSyncStub.called);\n\t\t\tassert.strictEqual(existsSyncStub.lastCall.args[0], file);\n\t\t},\n\n\t\t'Running locally: returns true'() {\n\t\t\tdelete process.env.HAS_GIT_CREDENTIALS;\n\t\t\tdelete process.env.TRAVIS_BRANCH;\n\t\t\tassert.isTrue(module.hasGitCredentials());\n\t\t}\n\t},\n\n\thexoRootOverride() {\n\t\tconst hexoRoot = 'hexoRoot';\n\t\tprocess.env.HEXO_ROOT = hexoRoot;\n\t\tassert.equal(environment.hexoRootOverride(), hexoRoot);\n\t},\n\n\thasKeyFile() {\n\t\tassert.isFalse(environment.hasKeyFile(file));\n\t},\n\n\tisCronJob() {\n\t\tprocess.env.TRAVIS_EVENT_TYPE = 'not cron';\n\t\tassert.isFalse(environment.isCronJob());\n\t},\n\n\tisRunningOnTravis() {\n\t\tdelete process.env.TRAVIS_BRANCH;\n\t\tassert.isFalse(environment.isRunningOnTravis());\n\t},\n\n\tkeyFile: {\n\t\t'returns KEY_FILE'() {\n\t\t\tconst fileName = 'key_file';\n\t\t\tprocess.env.KEY_FILE = fileName;\n\t\t\tassert.equal(environment.keyFile(), fileName);\n\t\t},\n\n\t\t'returns value passed'() {\n\t\t\tdelete process.env.KEY_FILE;\n\t\t\tassert.equal(environment.keyFile(), 'deploy_key');\n\t\t}\n\t},\n\n\tpublishMode: {\n\t\t'returns DEPLOY_DOCS'() {\n\t\t\tconst commit = 'commit';\n\t\t\tprocess.env.DEPLOY_DOCS = commit;\n\t\t\tassert.equal(environment.publishMode(), commit);\n\t\t},\n\n\t\t'returns `skip` if running on Travis'() {\n\t\t\tdelete process.env.DEPLOY_DOCS;\n\t\t\tprocess.env.TRAVIS_BRANCH = 'master';\n\t\t\tassert.equal(environment.publishMode(), 'skip');\n\t\t}\n\t},\n\n\trepositorySource: {\n\t\t'returns PUBLISH_TARGET_REPO if available'() {\n\t\t\tconst target = 'target repo';\n\t\t\tprocess.env.PUBLISH_TARGET_REPO = target;\n\t\t\tassert.equal(environment.repositorySource(), target);\n\t\t},\n\n\t\t'returns TRAVIS_REPO_SLUG if PUBLISH_TARGET_REPO unavailable'() {\n\t\t\tdelete process.env.PUBLISH_TARGET_REPO;\n\t\t\tconst slug = 'target_repo';\n\t\t\tprocess.env.TRAVIS_REPO_SLUG = slug;\n\t\t\tassert.equal(environment.repositorySource(), slug);\n\t\t},\n\n\t\t'returns empty string if TRAVIS_REPO_SLUG and PUBLISH_TARGET_REPO unavailable'() {\n\t\t\tdelete process.env.TRAVIS_REPO_SLUG;\n\t\t\tassert.equal(environment.repositorySource(), '');\n\t\t}\n\t}\n\t}\n});\n"]}