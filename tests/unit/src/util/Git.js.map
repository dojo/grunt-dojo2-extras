{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/Git.ts"],"names":[],"mappings":"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","sourcesContent":["import loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { spy, stub, SinonStub } from 'sinon';\nimport Git from '../../../../src/util/Git';\nimport * as env from '../../../../src/util/environment';\nimport { throwWithError } from '../../../_support/util';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet Module: any;\nlet git: Git;\nlet promiseSpawnStub: SinonStub;\nlet promiseExecStub: SinonStub;\nlet execStub: SinonStub;\nlet toStringStub: SinonStub;\nlet existsSyncStub: SinonStub;\nlet chmodSyncStub: SinonStub;\n\nregisterSuite('util/Git', {\n\tbefore() {\n\t\tpromiseSpawnStub = stub();\n\t\tpromiseExecStub = stub();\n\t\texecStub = stub();\n\t\ttoStringStub = stub();\n\t\texistsSyncStub = stub();\n\t\tchmodSyncStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tModule = loadModule(require, '../../../../src/util/Git', {\n\t\t\t'./process': {\n\t\t\t\tpromiseSpawn: promiseSpawnStub,\n\t\t\t\tpromiseExec: promiseExecStub,\n\t\t\t\texec: execStub\n\t\t\t},\n\t\t\t'./streams': {\n\t\t\t\ttoString: toStringStub\n\t\t\t},\n\t\t\tfs: {\n\t\t\t\texistsSync: existsSyncStub,\n\t\t\t\tchmodSync: chmodSyncStub\n\t\t\t}\n\t\t});\n\n\t\tgit = new Module();\n\t},\n\n\tafterEach() {\n\t\tpromiseSpawnStub.reset();\n\t\tpromiseExecStub.reset();\n\t\texecStub.reset();\n\t\ttoStringStub.reset();\n\t\texistsSyncStub.reset();\n\t\tchmodSyncStub.reset();\n\t},\n\n\ttests: {\n\t'constructor': {\n\t\t'with params'() {\n\t\t\tconst gitWithArgs = new Module('dir', 'file');\n\t\t\tassert.equal(gitWithArgs.cloneDirectory, 'dir');\n\t\t\tassert.equal(gitWithArgs.keyFile, 'file');\n\t\t},\n\t\t'default params'() {\n\t\t\tassert.equal(git.cloneDirectory, process.cwd());\n\t\t\tassert.equal(git.keyFile, env.keyFile());\n\t\t}\n\t},\n\n\tasync add() {\n\t\tpromiseExecStub.withArgs('git add file1 file2', {\n\t\t\tsilent: false,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns('pass');\n\n\t\tconst actual = git.add('file1', 'file2');\n\n\t\tassert.instanceOf(actual, Promise);\n\t\tassert.strictEqual(await actual, 'pass');\n\t},\n\n\tasync assert() {\n\t\tgit.isInitialized = () => false;\n\t\tgit.assert('url').then(\n\t\t\tthrowWithError('Should reject when the repository is not initialized'),\n\t\t\t(error: Error) => {\n\t\t\t\tassert.strictEqual(error.message,\n\t\t\t\t\t`Repository is not initialized at \"${ git.cloneDirectory }\"`);\n\t\t\t}\n\t\t);\n\n\t\tgit.isInitialized = () => true;\n\t\tgit.getConfig = stub().withArgs('remote.origin.url')\n\t\t\t.returns('url');\n\n\t\tgit.assert('other_url').then(\n\t\t\tthrowWithError('Should reject when the repository url is wrong'),\n\t\t\t(error: Error) => {\n\t\t\t\tassert.strictEqual(error.message,\n\t\t\t\t\t'Repository mismatch. Expected \"url\" to be \"other_url\".');\n\t\t\t}\n\t\t);\n\t\treturn git.assert('url');\n\t},\n\n\tasync checkout() {\n\t\tpromiseExecStub.withArgs('git checkout 1.2.3', {\n\t\t\tsilent: false,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns(Promise.resolve('pass'));\n\n\t\tconst actual = git.checkout('1.2.3');\n\n\t\tassert.instanceOf(actual, Promise);\n\t\tassert.strictEqual((await actual) as any, 'pass');\n\t},\n\n\tclone: {\n\t\t'If clone directory is not set; eventually rejects'() {\n\t\t\tdelete git.cloneDirectory;\n\t\t\treturn git.clone('url').then(\n\t\t\t\tthrowWithError('Should reject if clone directory is not set'),\n\t\t\t\t(error: Error) => {\n\t\t\t\t\tassert.equal(error.message, 'A clone directory must be set');\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\tasync 'Not initialized; assert not called, execSSHAgent called once, git.url === url'() {\n\t\t\tconst url = 'url';\n\t\t\tconst assertSpy = spy(git, 'assert');\n\t\t\tconst execSSHAgentStub = stub(git, 'execSSHAgent').returns(Promise.resolve());\n\t\t\tgit.isInitialized = () => false;\n\t\t\tawait git.clone(url);\n\t\t\tassert.isTrue(assertSpy.notCalled);\n\t\t\tassert.isTrue(execSSHAgentStub.called);\n\t\t\tassert.strictEqual(git.url, url);\n\t\t},\n\n\t\tasync 'Properly initialized; assert called once, execSSHAgent called once, git.url === url'() {\n\t\t\tconst url = 'url';\n\t\t\tconst assertStub = stub(git, 'assert');\n\t\t\tconst execSSHAgentStub = stub(git, 'execSSHAgent').returns(Promise.resolve());\n\t\t\tgit.isInitialized = () => true;\n\t\t\tawait git.clone(url);\n\t\t\tassert.isTrue(assertStub.called);\n\t\t\tassert.isTrue(execSSHAgentStub.called);\n\t\t\tassert.strictEqual(git.url, url);\n\t\t}\n\t},\n\n\tasync commit() {\n\t\tconst execSSHAgent = stub(git, 'execSSHAgent').returns(Promise.resolve());\n\t\tawait git.commit('message');\n\t\tassert.isTrue(execSSHAgent.calledOnce);\n\t\tassert.isTrue(execSSHAgent.calledWith('git', ['commit', '-m', '\"message\"'], { silent: false, cwd: git.cloneDirectory }));\n\t},\n\n\tcreateOrphan: {\n\t\t'If clone directory is not set; throws'() {\n\t\t\tdelete git.cloneDirectory;\n\t\t\tgit.createOrphan('branch').then(\n\t\t\t\tthrowWithError('Should throw when clone directory is not set'),\n\t\t\t\t(error: Error) => {\n\t\t\t\t\tassert.equal(error.message, 'A clone directory must be set');\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\tasync 'promiseExec called twice with proper options'() {\n\t\t\tconst execOptions = { silent: true, cwd: git.cloneDirectory };\n\t\t\tawait git.createOrphan('branch');\n\t\t\tassert.isTrue(promiseExecStub.calledTwice);\n\t\t\tassert.isTrue(promiseExecStub.calledWith('git checkout --orphan branch', execOptions));\n\t\t\tassert.isTrue(promiseExecStub.calledWith('git rm -rf .', execOptions));\n\t\t}\n\t},\n\n\tensureConfig: {\n\t\tasync 'hasConfig for user.name, user.email'() {\n\t\t\tgit.hasConfig = stub().returns(true);\n\t\t\tconst setConfig = git.setConfig = stub();\n\t\t\tawait git.ensureConfig();\n\t\t\tassert.isTrue(setConfig.notCalled);\n\t\t},\n\n\t\tasync '!hasConfig for user.name, user.email; default args set'() {\n\t\t\tgit.hasConfig = stub().returns(false);\n\t\t\tconst setConfig = git.setConfig = stub();\n\t\t\tawait git.ensureConfig();\n\t\t\tassert.isTrue(setConfig.calledWith('user.name', 'Travis CI'));\n\t\t\tassert.isTrue(setConfig.calledWith('user.email', 'support@sitepen.com'));\n\t\t},\n\n\t\tasync '!hasConfig for user.name, user.email; explicit args set'() {\n\t\t\tgit.hasConfig = stub().returns(false);\n\t\t\tconst setConfig = git.setConfig = stub();\n\t\t\tawait git.ensureConfig('name', 'email');\n\t\t\tassert.isTrue(setConfig.calledWith('user.name', 'name'));\n\t\t\tassert.isTrue(setConfig.calledWith('user.email', 'email'));\n\t\t}\n\t},\n\n\texecSSHAgent: {\n\t\tasync '!hasDeployCredentials; promiseSpawn called'() {\n\t\t\tconst command = 'git';\n\t\t\tconst args = [ 'status' ];\n\t\t\tconst opts = { silent: false };\n\t\t\tgit.hasDeployCredentials = () => false;\n\t\t\tawait git.execSSHAgent(command, args, opts);\n\t\t\tassert.isTrue(promiseSpawnStub.calledOnce);\n\t\t\tassert.isTrue(promiseSpawnStub.calledWith(command, args, opts));\n\t\t},\n\n\t\tasync 'hasDeployCredentials; chmodSync, promiseExec called'() {\n\t\t\tconst command = 'git';\n\t\t\tconst args = [ 'status' ];\n\t\t\tconst opts = { silent: false };\n\t\t\tgit.keyFile = 'key.file';\n\t\t\tgit.hasDeployCredentials = () => true;\n\t\t\tawait git.execSSHAgent(command, args, opts);\n\t\t\tassert.isTrue(chmodSyncStub.calledOnce);\n\t\t\tassert.isTrue(promiseExecStub.calledOnce);\n\t\t\tassert.isTrue(promiseExecStub.calledWith(`ssh-agent bash -c 'ssh-add key.file; git status'`, opts));\n\t\t}\n\t},\n\n\tasync getConfig() {\n\t\texistsSyncStub.withArgs(git.cloneDirectory).returns(true);\n\t\texecStub.withArgs('git config key', {\n\t\t\tsilent: true,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns({ stdout: 'key' });\n\t\ttoStringStub.withArgs('key').returns('key');\n\n\t\tconst keyConfig = await git.getConfig('key');\n\n\t\tassert.isTrue(execStub.calledOnce);\n\t\tassert.isTrue(toStringStub.calledOnce);\n\t\tassert.strictEqual(keyConfig, 'key');\n\t},\n\n\tasync getConfigDirectoryDoesNotExist() {\n\t\tconst cwd = process.cwd();\n\t\tconst cloneDirectory = git.cloneDirectory;\n\n\t\texistsSyncStub.withArgs(cwd).returns(false);\n\t\texecStub.withArgs('git config key', {\n\t\t\tsilent: true,\n\t\t\tcwd\n\t\t}).returns({ stdout: 'key' });\n\t\ttoStringStub.withArgs('key').returns('key');\n\n\t\tgit.cloneDirectory = '_does_not_exist_';\n\t\tconst keyConfig = await git.getConfig('key');\n\t\tgit.cloneDirectory = cloneDirectory;\n\n\t\tassert.isTrue(execStub.calledOnce);\n\t\tassert.isTrue(toStringStub.calledOnce);\n\t\tassert.strictEqual(keyConfig, 'key');\n\t},\n\n\tareFilesChanged: {\n\t\tbeforeEach() {\n\t\t\texecStub.withArgs('git status --porcelain', {\n\t\t\t\tsilent: true,\n\t\t\t\tcwd: git.cloneDirectory\n\t\t\t});\n\t\t},\n\t\ttests: {\n\t\tasync 'exec and toString each called once'() {\n\t\t\texecStub.returns({ stdout: '' });\n\t\t\ttoStringStub.returns('');\n\n\t\t\tawait git.areFilesChanged();\n\n\t\t\tassert.isTrue(execStub.calledOnce);\n\t\t\tassert.isTrue(toStringStub.calledOnce);\n\t\t},\n\t\tasync 'files are changed; returns true'() {\n\t\t\texecStub.returns({ stdout: 'changed' });\n\t\t\ttoStringStub.withArgs('changed').returns('changed');\n\n\t\t\tconst changed = await git.areFilesChanged();\n\n\t\t\tassert.isTrue(changed);\n\t\t},\n\t\tasync 'files are not changed; returns false'() {\n\t\t\texecStub.returns({ stdout: '' });\n\t\t\ttoStringStub.withArgs('').returns('');\n\n\t\t\tconst changed = await git.areFilesChanged();\n\n\t\t\tassert.isFalse(changed);\n\t\t}\n\t\t}\n\t},\n\n\thasConfig: {\n\t\tasync 'has a configuration value'() {\n\t\t\tgit.getConfig = async () => 'config';\n\t\t\tconst hasConfig = await git.hasConfig('config');\n\t\t\tassert.isTrue(hasConfig);\n\t\t},\n\t\tasync 'has no configuration value'() {\n\t\t\tgit.getConfig = async () => '';\n\t\t\tconst hasConfig = await git.hasConfig('config');\n\t\t\tassert.isFalse(hasConfig);\n\t\t}\n\t},\n\n\thasDeployCredentials() {\n\t\tconst exists = existsSyncStub.withArgs(git.keyFile);\n\n\t\texists.returns(true);\n\t\tassert.isTrue(git.hasDeployCredentials());\n\n\t\texists.returns(false);\n\t\tassert.isFalse(git.hasDeployCredentials());\n\t},\n\n\tasync headRevision() {\n\t\tconst hash = '505b86ca8feb5295789720ef9d56cf016c217b0e';\n\n\t\texecStub.withArgs('git rev-parse HEAD', {\n\t\t\tsilent: false,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns({ stdout: hash });\n\t\ttoStringStub.withArgs(hash)\n\t\t\t.returns(hash);\n\n\t\tconst revision = await git.headRevision();\n\n\t\tassert.isTrue(execStub.calledOnce);\n\t\tassert.isTrue(toStringStub.calledOnce);\n\n\t\tassert.strictEqual(revision, hash);\n\t},\n\n\tisInitialized: {\n\t\t'throws error if there is no cloneDirectory'() {\n\t\t\tgit.cloneDirectory = undefined as any;\n\t\t\tassert.throws(git.isInitialized);\n\n\t\t\ttry {\n\t\t\t\tgit.isInitialized();\n\t\t\t} catch (e) {\n\t\t\t\tassert.strictEqual(e.message, 'A clone directory must be set');\n\t\t\t}\n\t\t},\n\t\t'cloneDirectory exists but not counterpart .git directory; returns false'() {\n\t\t\texistsSyncStub.returns(false);\n\t\t\texistsSyncStub.withArgs(git.cloneDirectory).returns(true);\n\t\t\tassert.isFalse(git.isInitialized());\n\t\t},\n\t\t'cloneDirectory and .git directory exist; returns true'() {\n\t\t\texistsSyncStub.returns(true);\n\t\t\tassert.isTrue(git.isInitialized());\n\t\t}\n\t},\n\n\tpull() {\n\t\tconst execSSHAgentStub = git.execSSHAgent = stub();\n\n\t\tgit.pull('origin', 'master');\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'pull', 'origin', 'master' ], { cwd: git.cloneDirectory }));\n\n\t\tgit.pull();\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'pull' ], { cwd: git.cloneDirectory }));\n\t},\n\n\tpush() {\n\t\tconst execSSHAgentStub = git.execSSHAgent = stub();\n\n\t\tgit.push('master', 'origin');\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'push', 'origin', 'master' ], { silent: false, cwd: git.cloneDirectory }));\n\n\t\tgit.push();\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'push' ], { silent: false, cwd: git.cloneDirectory }));\n\t},\n\n\tsetConfig() {\n\t\tgit.setConfig('key', 'value');\n\t\tassert.isTrue(promiseExecStub.calledWith('git config --global key value', { silent: false }));\n\t}\n\t}\n});\n"]}