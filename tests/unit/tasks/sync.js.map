{"version":3,"file":"sync.js","sourceRoot":"","sources":["../../../../tests/unit/tasks/sync.ts"],"names":[],"mappings":"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","sourcesContent":["import Test from 'intern/lib/Test';\nimport * as grunt from 'grunt';\nimport { stub, spy, SinonStub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../_support/loadModule';\nimport { setupWrappedAsyncStub } from '../../_support/tasks';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet sync: any;\nlet registerMultiTaskStub: SinonStub;\n\nconst getGithubSlugStub = stub();\nconst syncStub = stub();\nconst getConfigStub = stub();\nconst wrapAsyncTaskStub = stub();\nconst optionsStub = stub();\n\nconst Git = class {\n\tconstructor() {}\n\tgetConfig: SinonStub = getConfigStub;\n};\nconst GitHub = class {\n\tconstructor() {\n\t\treturn this;\n\t}\n\turl: 'github.url';\n};\n\nconst GitSpy = spy(Git);\nconst GitHubSpy = spy(GitHub);\n\nregisterSuite('tasks/sync', {\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tregisterMultiTaskStub = stub(grunt, 'registerMultiTask');\n\t\toptionsStub.returns({});\n\t\tsync = loadModule(require, '../../../tasks/sync', {\n\t\t\t'../src/commands/sync': { default: syncStub },\n\t\t\t'./util/wrapAsyncTask': { default: wrapAsyncTaskStub },\n\t\t\t'./util/getGithubSlug': { default: getGithubSlugStub },\n\t\t\t'../src/util/GitHub': { default: GitHubSpy },\n\t\t\t'../src/util/Git': { default: GitSpy }\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tsyncStub.reset();\n\t\tgetGithubSlugStub.reset();\n\t\tGitSpy.reset();\n\t\tGitHubSpy.reset();\n\t\tgetConfigStub.reset();\n\t\twrapAsyncTaskStub.reset();\n\t\toptionsStub.reset();\n\n\t\tregisterMultiTaskStub.restore();\n\t},\n\n\ttests: {\n\t'syncTask uses GitHub repo info, calls sync; eventually resolves'(this: Test) {\n\t\tgetGithubSlugStub.returns({ name: 'name', owner: 'owner' });\n\t\tsyncStub.returns(Promise.resolve());\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\n\t\t\tassert.isTrue(getGithubSlugStub.calledOnce);\n\t\t\tassert.isTrue(GitHubSpy.calledOnce);\n\n\t\t\tassert.isTrue(syncStub.calledOnce);\n\t\t});\n\n\t\tsync(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t},\n\n\t'syncTask uses git repo url; eventually resolves'(this: any) {\n\t\tgetConfigStub.returns(Promise.resolve('repo.url'));\n\t\tgetGithubSlugStub.returns({});\n\t\tsyncStub.returns(Promise.resolve());\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\n\t\t\tassert.isTrue(GitSpy.calledOnce);\n\t\t\tassert.isTrue(getConfigStub.calledOnce);\n\n\t\t\tassert.isTrue(syncStub.calledOnce);\n\t\t});\n\n\t\tsync(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t},\n\n\t'syncTask has url in options; eventually resolves'(this: any) {\n\t\toptionsStub.returns({ url: 'options.url' });\n\t\tsyncStub.returns(Promise.resolve());\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\n\t\t\tassert.isTrue(getGithubSlugStub.notCalled);\n\n\t\t\tassert.isTrue(syncStub.calledOnce);\n\t\t});\n\n\t\tsync(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t}\n\t}\n});\n"]}