{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../../../tests/unit/tasks/setup.ts"],"names":[],"mappings":"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","sourcesContent":["import * as grunt from 'grunt';\nimport { stub, spy, SinonStub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../_support/loadModule';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet setup: any;\nlet registerMultiTaskStub: SinonStub;\n\nconst authenticateStub = stub();\nconst getGithubSlugStub = stub();\nconst initDeploymentStub = stub();\nconst initAuthorizationStub = stub();\nconst wrapAsyncTaskStub = stub();\nconst optionsStub = stub();\nconst GitHub = class {\n\tconstructor() {\n\t\treturn this;\n\t}\n\tapi: any = {\n\t\tauthenticate: authenticateStub\n\t};\n};\nconst GitHubSpy = spy(GitHub);\n\nregisterSuite('tasks/setup', {\n\tbeforeEach() {\n\t\tregisterMultiTaskStub = stub(grunt, 'registerMultiTask');\n\t\tsetup = loadModule(require, '../../../tasks/setup', {\n\t\t\t'./util/wrapAsyncTask': { default: wrapAsyncTaskStub },\n\t\t\t'../src/util/GitHub': { default: GitHubSpy },\n\t\t\t'./util/getGithubSlug': { default: getGithubSlugStub },\n\t\t\t'../src/commands/initialize/initDeployment': { default: initDeploymentStub },\n\t\t\t'../src/commands/initialize/initAuthorization': { default: initAuthorizationStub }\n\t\t});\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tafterEach() {\n\t\tgetGithubSlugStub.reset();\n\t\tauthenticateStub.reset();\n\t\tinitDeploymentStub.reset();\n\t\tinitAuthorizationStub.reset();\n\t\twrapAsyncTaskStub.reset();\n\t\toptionsStub.reset();\n\t\tGitHubSpy.reset();\n\n\t\tregisterMultiTaskStub.restore();\n\t},\n\n\ttests: {\n\t'setup calls initDeployment and initAuthorization; eventually resolves'(this: any) {\n\t\tconst deferred = this.async();\n\n\t\tlet counter = 0;\n\n\t\tgetGithubSlugStub.returns({ name: 'name', owner: 'owner' });\n\t\toptionsStub.returns({ password: 'password', username: 'username' });\n\t\twrapAsyncTaskStub.callsFake((task: () => Promise<any>) => {\n\t\t\ttask.call({ options: optionsStub }).then(deferred.rejectOnError(() => {\n\t\t\t\t// because wrapAsyncTask is called twice in this SUT, we don't want to run\n\t\t\t\t// any assertions until it has been called both times.\n\t\t\t\tif (counter >= 1) {\n\t\t\t\t\tassert.isTrue(optionsStub.calledTwice);\n\t\t\t\t\tassert.isTrue(registerMultiTaskStub.calledTwice);\n\t\t\t\t\tassert.isTrue(getGithubSlugStub.calledTwice);\n\t\t\t\t\tassert.isTrue(GitHubSpy.calledTwice);\n\t\t\t\t\tassert.isTrue(initDeploymentStub.calledOnce);\n\t\t\t\t\tassert.isTrue(initAuthorizationStub.calledOnce);\n\t\t\t\t\tdeferred.resolve();\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}));\n\t\t});\n\n\t\tsetup(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledTwice);\n\t}\n\t}\n});\n"]}