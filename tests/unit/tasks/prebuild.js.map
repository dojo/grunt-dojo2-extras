{"version":3,"file":"prebuild.js","sourceRoot":"","sources":["../../../../tests/unit/tasks/prebuild.ts"],"names":[],"mappings":";;;;;;;;;;;IACA,6BAA+B;IAC/B,+BAAwC;IACxC,wDAA2E;IAC3E,8CAA6D;IAErD,IAAA,2DAAa,CAAmC;IAChD,IAAA,wCAAM,CAA8B;IAE5C,IAAI,QAAa,CAAC;IAClB,IAAI,gBAA2B,CAAC;IAEhC,IAAM,iBAAiB,GAAG,YAAI,EAAE,CAAC;IACjC,IAAM,oBAAoB,GAAG,YAAI,EAAE,CAAC;IACpC,IAAM,UAAU,GAAG,EAAE,IAAI,EAAE,YAAI,EAAE,EAAE,CAAC;IAEpC,aAAa,CAAC,gBAAgB,EAAE;QAC/B,KAAK;YACJ,+BAAkB,EAAE,CAAC;QACtB,CAAC;QAED,UAAU;YACT,gBAAgB,GAAG,YAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;YAC/C,QAAQ,GAAG,oBAAU,CAAC,OAAO,EAAE,yBAAyB,EAAE;gBACzD,sBAAsB,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE;gBACtD,kCAAkC,EAAE,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACrE,YAAY,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE;aACpC,CAAC,CAAC;QACJ,CAAC;QAED,SAAS;YACR,iBAAiB,CAAC,KAAK,EAAE,CAAC;YAC1B,oBAAoB,CAAC,KAAK,EAAE,CAAC;YAC7B,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAExB,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC;QAED,KAAK,EAAE;YACP,kBAAkB,EAAE,CAAC;gBACpB,kCAAkC,IAAU,EAAE,SAAkB;oBAC/D,6BAAqB,CAAC,iBAAiB,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE;wBACtD,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;wBAC3C,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;wBAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,MAAM,CAAC,MAAM,CACZ,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAClD,+CAA+C,CAC/C,CAAC;wBACH,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,mDAAmD,CAAC,CAAC;wBAC/F,CAAC;oBACF,CAAC,CAAC,CAAC;gBACJ,CAAC;gBAED,sBAAsB,IAAU,EAAE,uBAAgC;oBACjE,wBAAwB,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;oBAExD,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;oBAEvE,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAEhB,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBAC7C,CAAC;gBAED,MAAM,CAAC;oBACN,uBAAuB;wBACtB,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBAC1B,CAAC;oBAED,mBAAmB;wBAClB,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBAC3B,CAAC;iBACD,CAAC;YACH,CAAC,CAAC,EAAE;SACH;KACD,CAAC,CAAC","sourcesContent":["import Test from 'intern/lib/Test';\nimport * as grunt from 'grunt';\nimport { SinonStub, stub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../_support/loadModule';\nimport { setupWrappedAsyncStub } from '../../_support/tasks';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet prebuild: any;\nlet registerTaskStub: SinonStub;\n\nconst wrapAsyncTaskStub = stub();\nconst decryptDeployKeyStub = stub();\nconst loggerStub = { info: stub() };\n\nregisterSuite('tasks/prebuild', {\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tregisterTaskStub = stub(grunt, 'registerTask');\n\t\tprebuild = loadModule(require, '../../../tasks/prebuild', {\n\t\t\t'./util/wrapAsyncTask': { default: wrapAsyncTaskStub },\n\t\t\t'../src/commands/decryptDeployKey': { default: decryptDeployKeyStub },\n\t\t\t'../src/log': { logger: loggerStub }\n\t\t});\n\t},\n\n\tafterEach() {\n\t\twrapAsyncTaskStub.reset();\n\t\tdecryptDeployKeyStub.reset();\n\t\tloggerStub.info.reset();\n\n\t\tregisterTaskStub.restore();\n\t},\n\n\ttests: {\n\t'decryptDeployKey': (() => {\n\t\tfunction assertInWrappedAsyncStub(test: Test, shouldLog: boolean) {\n\t\t\tsetupWrappedAsyncStub(wrapAsyncTaskStub, test.async(), () => {\n\t\t\t\tassert.isTrue(registerTaskStub.calledOnce);\n\t\t\t\tassert.isTrue(decryptDeployKeyStub.calledOnce);\n\t\t\t\tif (shouldLog) {\n\t\t\t\t\tassert.isTrue(\n\t\t\t\t\t\tloggerStub.info.calledWith('Decrypted deploy key'),\n\t\t\t\t\t\t'Should have logged that the key was decrypted'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tassert.isTrue(loggerStub.info.notCalled, 'Should not have logged that the key was decrypted');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction testPrebuild(test: Test, wasDecryptionSuccessful: boolean) {\n\t\t\tassertInWrappedAsyncStub(test, wasDecryptionSuccessful);\n\n\t\t\tdecryptDeployKeyStub.returns(Promise.resolve(wasDecryptionSuccessful));\n\n\t\t\tprebuild(grunt);\n\n\t\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\t}\n\n\t\treturn {\n\t\t\t'successful decryption'(this: Test) {\n\t\t\t\ttestPrebuild(this, true);\n\t\t\t},\n\n\t\t\t'decryption failed'(this: Test) {\n\t\t\t\ttestPrebuild(this, false);\n\t\t\t}\n\t\t};\n\t})()\n\t}\n});\n"]}