{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../tests/unit/tasks/api.ts"],"names":[],"mappings":"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","sourcesContent":["import * as grunt from 'grunt';\nimport { stub, spy, SinonStub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../_support/loadModule';\nimport { setupWrappedAsyncStub } from '../../_support/tasks';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nlet api: any;\nlet registerMultiTaskStub: SinonStub;\n\nconst typedocStub = stub();\nconst syncStub = stub();\nconst getTagsStub = stub();\nconst createHtmlApiMissingFilterStub = stub();\nconst createJsonApiMissingFilterStub = stub();\nconst createVersionFilterStub = stub();\nconst getHtmlApiPathStub = stub();\nconst getJsonApiPathStub = stub();\nconst latestFilterStub = stub();\nconst joinStub = stub();\nconst resolveStub = stub();\nconst installDependenciesStub = stub();\nconst makeTempDirectoryStub = stub();\nconst wrapAsyncTaskStub = stub();\nconst optionsStub = stub();\nconst GitHub = class {\n\tname: string;\n\turl: string;\n\tconstructor(owner: any, name: any) {\n\t\tthis.name = name;\n\t\tthis.url = `https://github.com/${owner}/${name}`;\n\t\treturn this;\n\t}\n};\nconst GitHubSpy = spy(GitHub);\n\nregisterSuite('tasks/api', {\n\tbeforeEach() {\n\t\tapi = loadModule(require, '../../../tasks/api', {\n\t\t\t'../src/commands/typedoc': { default: typedocStub },\n\t\t\t'./util/wrapAsyncTask': { default: wrapAsyncTaskStub },\n\t\t\t'../src/util/GitHub': { default: GitHubSpy },\n\t\t\t'../src/commands/sync': { default: syncStub },\n\t\t\t'../src/commands/getTags': {\n\t\t\t\tdefault: getTagsStub,\n\t\t\t\tcreateHtmlApiMissingFilter: createHtmlApiMissingFilterStub,\n\t\t\t\tcreateJsonApiMissingFilter: createJsonApiMissingFilterStub,\n\t\t\t\tcreateVersionFilter: createVersionFilterStub,\n\t\t\t\tgetHtmlApiPath: getHtmlApiPathStub,\n\t\t\t\tgetJsonApiPath: getJsonApiPathStub,\n\t\t\t\tlatestFilter: latestFilterStub\n\t\t\t},\n\t\t\t'path': {\n\t\t\t\tjoin: joinStub,\n\t\t\t\tresolve: resolveStub\n\t\t\t},\n\t\t\t'../src/commands/installDependencies': { default: installDependenciesStub },\n\t\t\t'../src/util/file': { makeTempDirectory: makeTempDirectoryStub }\n\t\t});\n\t\tregisterMultiTaskStub = stub(grunt, 'registerMultiTask');\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tafterEach() {\n\t\ttypedocStub.reset();\n\t\tGitHubSpy.reset();\n\t\tsyncStub.reset();\n\t\tgetTagsStub.reset();\n\t\tcreateHtmlApiMissingFilterStub.reset();\n\t\tcreateJsonApiMissingFilterStub.reset();\n\t\tcreateVersionFilterStub.reset();\n\t\tgetHtmlApiPathStub.reset();\n\t\tgetJsonApiPathStub.reset();\n\t\tlatestFilterStub.reset();\n\t\tjoinStub.reset();\n\t\tresolveStub.reset();\n\t\tinstallDependenciesStub.reset();\n\t\tmakeTempDirectoryStub.reset();\n\t\twrapAsyncTaskStub.reset();\n\t\toptionsStub.reset();\n\n\t\tregisterMultiTaskStub.restore();\n\t},\n\n\ttests: {\n\t'api task has remote options including html format and string repo; no missing filters, no APIs match; eventually resolves'(this: any) {\n\t\tgetTagsStub.returns([]);\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'html',\n\t\t\trepo: 'user/repo',\n\t\t\tcloneDirectory: 'cloneDirectory',\n\t\t\tfilter: 'filter',\n\t\t\tskipInstall: true,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(GitHubSpy.calledOnce);\n\t\t\tassert.isTrue(joinStub.notCalled);\n\t\t\tassert.isTrue(makeTempDirectoryStub.notCalled);\n\t\t\tassert.isTrue(createVersionFilterStub.calledOnce);\n\t\t\tassert.isTrue(createHtmlApiMissingFilterStub.calledOnce);\n\t\t\tassert.isTrue(getTagsStub.calledOnce);\n\t\t\tassert.isTrue(getHtmlApiPathStub.notCalled);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t},\n\n\t'api task has remote options including json format and object repo; no filters, all APIs up to date; eventually resolves'(this: any) {\n\t\tgetTagsStub.returns([]);\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'json',\n\t\t\trepo: { owner: 'user', name: 'repo' },\n\t\t\tskipInstall: true,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(GitHubSpy.calledOnce);\n\t\t\tassert.isTrue(joinStub.calledOnce);\n\t\t\tassert.isTrue(makeTempDirectoryStub.calledOnce);\n\t\t\tassert.isTrue(createVersionFilterStub.notCalled);\n\t\t\tassert.isTrue(createJsonApiMissingFilterStub.calledOnce);\n\t\t\tassert.isTrue(getTagsStub.calledOnce);\n\t\t\tassert.isTrue(getJsonApiPathStub.notCalled);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t},\n\n\t'api task has remote options including json format and object repo; latest filters, all APIs up to date; eventually resolves'(this: any) {\n\t\tgetTagsStub.returns([{ name: 'name' }]);\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'json',\n\t\t\trepo: { owner: 'user', name: 'repo' },\n\t\t\tfilter: 'latest',\n\t\t\tskipInstall: true,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(GitHubSpy.calledOnce);\n\t\t\tassert.isTrue(joinStub.calledOnce);\n\t\t\tassert.isTrue(makeTempDirectoryStub.calledOnce);\n\t\t\tassert.isTrue(createVersionFilterStub.notCalled);\n\t\t\tassert.isTrue(createJsonApiMissingFilterStub.calledOnce);\n\t\t\tassert.isTrue(getTagsStub.calledOnce);\n\t\t\tassert.isTrue(getJsonApiPathStub.calledOnce);\n\t\t\tassert.isTrue(syncStub.calledOnce);\n\t\t\tassert.isTrue(installDependenciesStub.notCalled);\n\t\t\tassert.isTrue(typedocStub.calledOnce);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t},\n\n\t'api task has remote options including filter object; runs installDependencies; eventually resolves'(this: any) {\n\t\tgetTagsStub.returns([{ name: 'name' }]);\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'html',\n\t\t\trepo: { owner: 'user', name: 'repo' },\n\t\t\tfilter: {},\n\t\t\tskipInstall: false,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(GitHubSpy.calledOnce);\n\t\t\tassert.isTrue(joinStub.calledOnce);\n\t\t\tassert.isTrue(makeTempDirectoryStub.calledOnce);\n\t\t\tassert.isTrue(createVersionFilterStub.notCalled);\n\t\t\tassert.isTrue(createHtmlApiMissingFilterStub.calledOnce);\n\t\t\tassert.isTrue(getTagsStub.calledOnce);\n\t\t\tassert.isTrue(getHtmlApiPathStub.calledOnce);\n\t\t\tassert.isTrue(syncStub.calledOnce);\n\t\t\tassert.isTrue(installDependenciesStub.calledOnce);\n\t\t\tassert.isTrue(typedocStub.calledOnce);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t},\n\n\t'api task has remote options; runs installDependencies; eventually resolves'(this: any) {\n\t\tgetTagsStub.returns([{ name: 'name' }]);\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'html',\n\t\t\trepo: { owner: 'user', name: 'repo' },\n\t\t\tfilter: [],\n\t\t\tskipInstall: false,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(GitHubSpy.calledOnce);\n\t\t\tassert.isTrue(joinStub.calledOnce);\n\t\t\tassert.isTrue(makeTempDirectoryStub.calledOnce);\n\t\t\tassert.isTrue(createVersionFilterStub.notCalled);\n\t\t\tassert.isTrue(createHtmlApiMissingFilterStub.calledOnce);\n\t\t\tassert.isTrue(getTagsStub.calledOnce);\n\t\t\tassert.isTrue(getHtmlApiPathStub.calledOnce);\n\t\t\tassert.isTrue(syncStub.calledOnce);\n\t\t\tassert.isTrue(installDependenciesStub.calledOnce);\n\t\t\tassert.isTrue(typedocStub.calledOnce);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t},\n\n\t'api task has no remote options; eventually resolves'(this: any) {\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'html',\n\t\t\tskipInstall: true,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(resolveStub.calledOnce);\n\t\t\tassert.isTrue(typedocStub.calledOnce);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t},\n\n\t'api task has no remote options; runs installDependencies; eventually resolves'(this: any) {\n\t\toptionsStub.returns({\n\t\t\tsrc: 'src',\n\t\t\tdest: 'dest',\n\t\t\tformat: 'html',\n\t\t\tskipInstall: false,\n\t\t\ttypedoc: {}\n\t\t});\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(optionsStub.calledOnce);\n\t\t\tassert.isTrue(installDependenciesStub.calledOnce);\n\t\t\tassert.isTrue(resolveStub.calledOnce);\n\t\t\tassert.isTrue(typedocStub.calledOnce);\n\t\t});\n\n\t\tapi(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\tassert.isTrue(registerMultiTaskStub.calledOnce);\n\t}\n\t}\n});\n"]}