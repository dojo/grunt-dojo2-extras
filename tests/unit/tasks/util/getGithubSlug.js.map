{"version":3,"file":"getGithubSlug.js","sourceRoot":"","sources":["../../../../../tests/unit/tasks/util/getGithubSlug.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,sEAAiE;IACjE,+BAA6B;IAErB,IAAA,2DAAa,CAAmC;IAChD,IAAA,wCAAM,CAA8B;IAE5C,2BAA2B,GAAW;QACrC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC;QAC/B,IAAA,8BAAiC,EAA/B,cAAI,EAAE,gBAAK,CAAqB;QACxC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,YAAiB,CAAC;IAEtB,aAAa,CAAC,eAAe,EAAE;QAC9B,UAAU;YACT,YAAY,GAAG;gBACd,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB;gBAC9C,mBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB;aACpD,CAAC;YACF,OAAO,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;YACpC,OAAO,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;QACxC,CAAC;QAED,SAAS;YACR,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC;gBAC9B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;QACF,CAAC;QAED,KAAK,EAAE;YACP,mBAAmB;gBAClB,IAAM,SAAS,GAAQ;oBACtB,MAAM,EAAE,YAAI,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC;iBACzC,CAAC;gBACI,IAAA,kDAAqD,EAAnD,cAAI,EAAE,gBAAK,CAAyC;gBAC5D,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBACrC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACrC,CAAC;YAED,cAAc;gBACP,IAAA,yDAA4D,EAA1D,cAAI,EAAE,gBAAK,CAAgD;gBACnE,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBACrC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACrC,CAAC;YAED,0CAA0C;gBACzC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;YAE1C,CAAC;YAED,uCAAuC;gBACtC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;YACvC,CAAC;YAED,gBAAgB;gBACT,IAAA,8BAAiC,EAA/B,cAAI,EAAE,gBAAK,CAAqB;gBACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACzB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;SACA;KACD,CAAC,CAAC","sourcesContent":["import getGithubSlug from '../../../../tasks/util/getGithubSlug';\nimport { stub } from 'sinon';\n\nconst { registerSuite } = intern.getInterface('object');\nconst { assert } = intern.getPlugin('chai');\n\nfunction assertEnvironment(key: string) {\n\tprocess.env[key] = 'devpaul/dojo.io';\n\tconst { name, owner } = getGithubSlug();\n\tassert.strictEqual(owner, 'devpaul');\n\tassert.strictEqual(name, 'dojo.io');\n}\n\nlet processCache: any;\n\nregisterSuite('getGithubSlug', {\n\tbeforeEach() {\n\t\tprocessCache = {\n\t\t\tTRAVIS_REPO_SLUG: process.env.TRAVIS_REPO_SLUG,\n\t\t\tPUBLISH_TARGET_REPO: process.env.PUBLISH_TARGET_REPO\n\t\t};\n\t\tdelete process.env.TRAVIS_REPO_SLUG;\n\t\tdelete process.env.PUBLISH_TARGET_REPO;\n\t},\n\n\tafterEach() {\n\t\tfor (let key in processCache) {\n\t\t\tprocess.env[key] = processCache[key];\n\t\t}\n\t},\n\n\ttests: {\n\t'grunt repo option'() {\n\t\tconst gruntMock: any = {\n\t\t\toption: stub().returns('devpaul/dojo.io')\n\t\t};\n\t\tconst { name, owner } = getGithubSlug(undefined, gruntMock);\n\t\tassert.strictEqual(owner, 'devpaul');\n\t\tassert.strictEqual(name, 'dojo.io');\n\t},\n\n\t'options repo'() {\n\t\tconst { name, owner } = getGithubSlug({ repo: 'devpaul/dojo.io' });\n\t\tassert.strictEqual(owner, 'devpaul');\n\t\tassert.strictEqual(name, 'dojo.io');\n\t},\n\n\t'PUBLISH_TARGET_REPO environment variable'() {\n\t\tassertEnvironment('PUBLISH_TARGET_REPO');\n\n\t},\n\n\t'TRAVIS_REPO_SLUG environment variable'() {\n\t\tassertEnvironment('TRAVIS_REPO_SLUG');\n\t},\n\n\t'no repo option'() {\n\t\tconst { name, owner } = getGithubSlug();\n\t\tassert.isUndefined(name);\n\t\tassert.isUndefined(owner);\n\t}\n\t}\n});\n"]}