{"version":3,"file":"api.js","sourceRoot":"","sources":["../../tasks/api.ts"],"names":[],"mappings":";;;;;;;;;;;IACA,mDAA6E;IAC7E,sDAAiD;IACjD,6CAAiD;IACjD,6CAAwC;IACxC,mDAQiC;IACjC,6BAAqC;IACrC,2EAAsE;IACtE,kCAAoC;IACpC,yCAAqD;IACrD,8BAA4B;IAqB5B,yBAAyB,OAAY;QACpC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,mBAAmB,IAA8B;QAChD,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxB,IAAA,oBAAiC,EAA/B,aAAK,EAAE,cAAI,CAAqB;YACxC,MAAM,CAAC,IAAI,gBAAM,CAAC,KAAK,EAAE,MAAI,CAAC,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC;IACF,CAAC;IAED,oBAA0B,IAAY,EAAE,OAAyB;;;;gBAC1D,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAEjD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,oCAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnE,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,OAAO,CAAC,IAAI,CAAC,oCAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnE,CAAC;gBAED,WAAO,iBAAW,CAAC,IAAI,EAAE,OAAO,CAAC,EAAC;;;KAClC;IAED,0BAA0B,MAAmC;QAC5D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,CAAE,sBAAY,CAAE,CAAC;QACzB,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,CAAE,6BAAmB,CAAC,MAAM,CAAC,CAAE,CAAC;QACxC,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAED,MAAM,CAAC,CAAE,MAAM,CAAE,CAAC;IACnB,CAAC;IAED,OAAS,UAAU,KAAa;QAC/B;;;;;;4BACO,OAAO,GAAQ,IAAI,CAAC,OAAO,CAAuB;gCACvD,MAAM,EAAE,MAAM;gCACd,OAAO,EAAE;oCACR,IAAI,EAAE,MAAM;oCACZ,eAAe,EAAE,2DAA2D;oCAC5E,gBAAgB,EAAE,IAAI;oCACtB,kBAAkB,EAAE,IAAI;oCACxB,oBAAoB,EAAE,IAAI;iCAC1B;6BACD,CAAC,CAAC;4BAEK,GAAG,GAAmB,OAAO,IAA1B,EAAE,IAAI,GAAa,OAAO,KAApB,EAAE,MAAM,GAAK,OAAO,OAAZ,CAAa;iCAElC,eAAe,CAAC,OAAO,CAAC,EAAxB,cAAwB;4BACrB,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;4BAC/B,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;gCAC9C,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,wBAAiB,CAAC,WAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACtD,WAAM,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;;4BAAzC,OAAO,GAAG,SAA+B;4BACzC,YAAY,GAAG,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,wBAAc,CAAC,CAAC,CAAC,wBAAc,CAAC;4BAEzE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oCACpB,YAAM,CAAC,IAAI,CAAC,iCAA+B,OAAO,CAAC,MAAS,CAAC,CAAC;gCAC/D,CAAC;gCACD,IAAI,CAAC,CAAC;oCACL,YAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gCACzC,CAAC;gCACD,MAAM,KAAC;4BACR,CAAC;kCAE4B,EAAP,mBAAO;;;iCAAP,CAAA,qBAAO,CAAA;4BAAlB,OAAO;4BACX,MAAM,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;4BAE3D,WAAM,cAAI,CAAC;oCACV,MAAM,EAAE,OAAO,CAAC,IAAI;oCACpB,cAAc,gBAAA;oCACd,GAAG,EAAE,IAAI,CAAC,GAAG;iCACb,CAAC,EAAA;;4BAJF,SAIE,CAAC;iCAEC,CAAA,OAAO,CAAC,WAAW,KAAK,IAAI,CAAA,EAA5B,cAA4B;4BAC/B,WAAM,6BAAmB,CAAC,cAAc,CAAC,EAAA;;4BAAzC,SAAyC,CAAC;;gCAE3C,WAAM,iBAAO,CAAC,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,EAAA;;4BAAtD,SAAsD,CAAC;;;4BAZlC,IAAO,CAAA;;;;iCAgBzB,CAAA,OAAO,CAAC,WAAW,KAAK,KAAK,CAAA,EAA7B,eAA6B;4BAChC,WAAM,6BAAmB,CAAC,GAAG,CAAC,EAAA;;4BAA9B,SAA8B,CAAC;;iCAEhC,WAAM,iBAAO,CAAC,cAAO,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,EAAA;;4BAAlD,SAAkD,CAAC;;;;;;SAEpD;QAED,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,uBAAa,CAAC,WAAW,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC","sourcesContent":["import IMultiTask = grunt.task.IMultiTask;\nimport typedoc, { Options as TypedocOptions } from '../src/commands/typedoc';\nimport wrapAsyncTask from './util/wrapAsyncTask';\nimport GitHub, { Tag } from '../src/util/GitHub';\nimport sync from '../src/commands/sync';\nimport getReleases, {\n\tcreateHtmlApiMissingFilter,\n\tcreateJsonApiMissingFilter,\n\tcreateVersionFilter,\n\tgetHtmlApiPath,\n\tgetJsonApiPath,\n\tlatestFilter,\n\tTagFilter\n} from '../src/commands/getTags';\nimport { join, resolve } from 'path';\nimport installDependencies from '../src/commands/installDependencies';\nimport { logger } from '../src/log';\nimport { makeTempDirectory } from '../src/util/file';\nimport '@dojo/shim/Promise'; // TODO I don't know why I have to do this, but it fixes things.\n\ninterface BaseOptions {\n\tdest: string;\n\tformat: 'html' | 'json';\n\tskipInstall: boolean;\n\tsrc: string;\n\ttypedoc?: Partial<TypedocOptions>;\n}\n\ninterface RemoteApiOptions extends BaseOptions {\n\tcloneDirectory?: string;\n\tfilter?: TagFilter | TagFilter[] | string;\n\trepo: {\n\t\towner: string;\n\t\tname: string;\n\t} | string;\n}\n\ntype TaskOptions = BaseOptions | RemoteApiOptions;\n\nfunction isRemoteOptions(options: any): options is RemoteApiOptions {\n\treturn !!options.repo;\n}\n\nfunction getGitHub(repo: RemoteApiOptions['repo']) {\n\tif (typeof repo === 'string') {\n\t\tconst [ owner, name ] = repo.split('/');\n\t\treturn new GitHub(owner, name);\n\t}\n\telse {\n\t\treturn new GitHub(repo.owner, repo.name);\n\t}\n}\n\nasync function getMissing(repo: GitHub, options: RemoteApiOptions): Promise<Tag[]> {\n\tconst filters = getFilterOptions(options.filter);\n\n\tif (options.format === 'json') {\n\t\tfilters.push(createJsonApiMissingFilter(repo.name, options.dest));\n\t}\n\telse {\n\t\tfilters.push(createHtmlApiMissingFilter(repo.name, options.dest));\n\t}\n\n\treturn getReleases(repo, filters);\n}\n\nfunction getFilterOptions(filter?: RemoteApiOptions['filter']): TagFilter[] {\n\tif (!filter) {\n\t\treturn [];\n\t}\n\tif (filter === 'latest') {\n\t\treturn [ latestFilter ];\n\t}\n\tif (typeof filter === 'string') {\n\t\treturn [ createVersionFilter(filter) ];\n\t}\n\tif (Array.isArray(filter)) {\n\t\treturn filter;\n\t}\n\n\treturn [ filter ];\n}\n\nexport = function (grunt: IGrunt) {\n\tasync function typedocTask(this: IMultiTask<any>) {\n\t\tconst options: any = this.options<Partial<TaskOptions>>({\n\t\t\tformat: 'html',\n\t\t\ttypedoc: {\n\t\t\t\tmode: 'file',\n\t\t\t\texternalPattern: '**/+(example|examples|node_modules|tests|typings)/**/*.ts',\n\t\t\t\texcludeExternals: true,\n\t\t\t\texcludeNotExported: true,\n\t\t\t\tignoreCompilerErrors: true\n\t\t\t}\n\t\t});\n\n\t\tconst { src, dest, format } = options;\n\n\t\tif (isRemoteOptions(options)) {\n\t\t\tconst repo = getGitHub(options.repo);\n\t\t\tconst cloneDirectory = options.cloneDirectory ?\n\t\t\t\toptions.cloneDirectory : makeTempDirectory(join('.sync', repo.name));\n\t\t\tconst missing = await getMissing(repo, options);\n\t\t\tconst pathTemplate = format === 'json' ? getJsonApiPath : getHtmlApiPath;\n\n\t\t\tif (missing.length === 0) {\n\t\t\t\tif (options.filter) {\n\t\t\t\t\tlogger.info(`No APIs match the filter: \"${ options.filter }`);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogger.info(`all APIs are up-to-date.`);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const release of missing) {\n\t\t\t\tconst target = pathTemplate(dest, repo.name, release.name);\n\n\t\t\t\tawait sync({\n\t\t\t\t\tbranch: release.name,\n\t\t\t\t\tcloneDirectory,\n\t\t\t\t\turl: repo.url\n\t\t\t\t});\n\n\t\t\t\tif (options.skipInstall !== true) {\n\t\t\t\t\tawait installDependencies(cloneDirectory);\n\t\t\t\t}\n\t\t\t\tawait typedoc(cloneDirectory, target, options.typedoc);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (options.skipInstall === false) {\n\t\t\t\tawait installDependencies(src);\n\t\t\t}\n\t\t\tawait typedoc(resolve(src), dest, options.typedoc);\n\t\t}\n\t}\n\n\tgrunt.registerMultiTask('api', wrapAsyncTask(typedocTask));\n};\n"]}